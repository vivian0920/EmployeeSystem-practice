//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18408
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.18408。
// 
#pragma warning disable 1591

namespace BusinessLogicLayer.OperationService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OperationServicesSoap", Namespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices")]
    public partial class OperationServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ProcessVaribleChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailItemInINSTStateChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActPtcpChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActPtcpInstOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailItemInINSTChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcVarInstListByWKItemIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback WKItemPtcpInstChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SysVarListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckWKItemPtcpUsrOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextManActPtcpPreViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManWKItemReActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackwardLastProWithoutRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyMailItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyWKItemPtcpOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserRolChkOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserOUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCLoadUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCLoginCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstListByProsecutorOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstListByProposerAndProcStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstListByProposerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstListByProcStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstListByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManActInstAddNextOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcStockDelOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailItemDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SequenceDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback UndoFilingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstExportOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstDelOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstImportOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstListByProcDefIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForJumpActListOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackJumpActListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstDelayListOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstSuspendOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstAbortOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForwardOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackwardLastPtcpOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackwardLastProOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackwardWKItemPtcpOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackwardSomeoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForJumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForJumpSomeoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackJumpLastPtcpOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackJumpLastProOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackJumpWKItemPtcpOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackJumpWKItemProOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackJumpSomeoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReassignOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcDefDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback FilingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstStockCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcDefImportWithoutDelSotckOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcDefImportOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcDefExportOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcDefExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback WorklistOperationCompleted;
        
        private System.Threading.SendOrPostCallback WorklistOrderByColumnsOperationCompleted;
        
        private System.Threading.SendOrPostCallback WorklistByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback WorklistByDateOrderByColumnsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcDefListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcVarListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcVarInstListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubProcVarListOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstructListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelOverdueStockOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcInstDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback OUIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback RoleIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GroupIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback OuUserIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecursiveUserIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback OuRoleIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GroupUserIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserIDLikeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewestProcDefListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManWKItemTrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback WKItemTrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback WKItemTrackByWKItemIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback WKItemTrackByWKItemKindOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrievalbeWKItemListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OperationServices() {
            this.Url = global::BusinessLogicLayer.Properties.Settings.Default.BusinessLogicLayer_OperationService_OperationServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ProcessVaribleChangeCompletedEventHandler ProcessVaribleChangeCompleted;
        
        /// <remarks/>
        public event MailItemInINSTStateChangeCompletedEventHandler MailItemInINSTStateChangeCompleted;
        
        /// <remarks/>
        public event ActPtcpChangeCompletedEventHandler ActPtcpChangeCompleted;
        
        /// <remarks/>
        public event GetActPtcpInstCompletedEventHandler GetActPtcpInstCompleted;
        
        /// <remarks/>
        public event MailItemInINSTChangeCompletedEventHandler MailItemInINSTChangeCompleted;
        
        /// <remarks/>
        public event ProcVarInstListByWKItemIDCompletedEventHandler ProcVarInstListByWKItemIDCompleted;
        
        /// <remarks/>
        public event WKItemPtcpInstChangeCompletedEventHandler WKItemPtcpInstChangeCompleted;
        
        /// <remarks/>
        public event SysVarListCompletedEventHandler SysVarListCompleted;
        
        /// <remarks/>
        public event CheckWKItemPtcpUsrCompletedEventHandler CheckWKItemPtcpUsrCompleted;
        
        /// <remarks/>
        public event GetNextManActPtcpPreViewCompletedEventHandler GetNextManActPtcpPreViewCompleted;
        
        /// <remarks/>
        public event ManWKItemReActiveCompletedEventHandler ManWKItemReActiveCompleted;
        
        /// <remarks/>
        public event BackwardLastProWithoutRecordCompletedEventHandler BackwardLastProWithoutRecordCompleted;
        
        /// <remarks/>
        public event VerifyMailItemCompletedEventHandler VerifyMailItemCompleted;
        
        /// <remarks/>
        public event VerifyWKItemPtcpCompletedEventHandler VerifyWKItemPtcpCompleted;
        
        /// <remarks/>
        public event UserRolChkCompletedEventHandler UserRolChkCompleted;
        
        /// <remarks/>
        public event UserOUIDCompletedEventHandler UserOUIDCompleted;
        
        /// <remarks/>
        public event SCLoadUserCompletedEventHandler SCLoadUserCompleted;
        
        /// <remarks/>
        public event SCLoginCheckCompletedEventHandler SCLoginCheckCompleted;
        
        /// <remarks/>
        public event ProcInstListByProsecutorCompletedEventHandler ProcInstListByProsecutorCompleted;
        
        /// <remarks/>
        public event ProcInstListByProposerAndProcStateCompletedEventHandler ProcInstListByProposerAndProcStateCompleted;
        
        /// <remarks/>
        public event ProcInstListByProposerCompletedEventHandler ProcInstListByProposerCompleted;
        
        /// <remarks/>
        public event ProcInstListByProcStateCompletedEventHandler ProcInstListByProcStateCompleted;
        
        /// <remarks/>
        public event ProcInstListByDateCompletedEventHandler ProcInstListByDateCompleted;
        
        /// <remarks/>
        public event ManActInstAddNextCompletedEventHandler ManActInstAddNextCompleted;
        
        /// <remarks/>
        public event ProcStockDelCompletedEventHandler ProcStockDelCompleted;
        
        /// <remarks/>
        public event MailItemDeleteCompletedEventHandler MailItemDeleteCompleted;
        
        /// <remarks/>
        public event SequenceDeleteCompletedEventHandler SequenceDeleteCompleted;
        
        /// <remarks/>
        public event UndoFilingCompletedEventHandler UndoFilingCompleted;
        
        /// <remarks/>
        public event ProcInstExportCompletedEventHandler ProcInstExportCompleted;
        
        /// <remarks/>
        public event ProcInstDelCompletedEventHandler ProcInstDelCompleted;
        
        /// <remarks/>
        public event ProcInstImportCompletedEventHandler ProcInstImportCompleted;
        
        /// <remarks/>
        public event ProcInstListByProcDefIDCompletedEventHandler ProcInstListByProcDefIDCompleted;
        
        /// <remarks/>
        public event ForJumpActListCompletedEventHandler ForJumpActListCompleted;
        
        /// <remarks/>
        public event BackJumpActListCompletedEventHandler BackJumpActListCompleted;
        
        /// <remarks/>
        public event ProcInstDelayListCompletedEventHandler ProcInstDelayListCompleted;
        
        /// <remarks/>
        public event StartCompletedEventHandler StartCompleted;
        
        /// <remarks/>
        public event ProcInstSuspendCompletedEventHandler ProcInstSuspendCompleted;
        
        /// <remarks/>
        public event ProcInstResumeCompletedEventHandler ProcInstResumeCompleted;
        
        /// <remarks/>
        public event ProcInstAbortCompletedEventHandler ProcInstAbortCompleted;
        
        /// <remarks/>
        public event ForwardCompletedEventHandler ForwardCompleted;
        
        /// <remarks/>
        public event BackwardLastPtcpCompletedEventHandler BackwardLastPtcpCompleted;
        
        /// <remarks/>
        public event BackwardLastProCompletedEventHandler BackwardLastProCompleted;
        
        /// <remarks/>
        public event BackwardWKItemPtcpCompletedEventHandler BackwardWKItemPtcpCompleted;
        
        /// <remarks/>
        public event BackwardSomeoneCompletedEventHandler BackwardSomeoneCompleted;
        
        /// <remarks/>
        public event ForJumpCompletedEventHandler ForJumpCompleted;
        
        /// <remarks/>
        public event ForJumpSomeoneCompletedEventHandler ForJumpSomeoneCompleted;
        
        /// <remarks/>
        public event BackJumpLastPtcpCompletedEventHandler BackJumpLastPtcpCompleted;
        
        /// <remarks/>
        public event BackJumpLastProCompletedEventHandler BackJumpLastProCompleted;
        
        /// <remarks/>
        public event BackJumpWKItemPtcpCompletedEventHandler BackJumpWKItemPtcpCompleted;
        
        /// <remarks/>
        public event BackJumpWKItemProCompletedEventHandler BackJumpWKItemProCompleted;
        
        /// <remarks/>
        public event BackJumpSomeoneCompletedEventHandler BackJumpSomeoneCompleted;
        
        /// <remarks/>
        public event ReassignCompletedEventHandler ReassignCompleted;
        
        /// <remarks/>
        public event RetrieveCompletedEventHandler RetrieveCompleted;
        
        /// <remarks/>
        public event ProcDefDeleteCompletedEventHandler ProcDefDeleteCompleted;
        
        /// <remarks/>
        public event FilingCompletedEventHandler FilingCompleted;
        
        /// <remarks/>
        public event ProcInstStockCreateCompletedEventHandler ProcInstStockCreateCompleted;
        
        /// <remarks/>
        public event ProcDefImportWithoutDelSotckCompletedEventHandler ProcDefImportWithoutDelSotckCompleted;
        
        /// <remarks/>
        public event ProcDefImportCompletedEventHandler ProcDefImportCompleted;
        
        /// <remarks/>
        public event ProcDefExportCompletedEventHandler ProcDefExportCompleted;
        
        /// <remarks/>
        public event ProcDefExistCompletedEventHandler ProcDefExistCompleted;
        
        /// <remarks/>
        public event GetUserInfoStringCompletedEventHandler GetUserInfoStringCompleted;
        
        /// <remarks/>
        public event WorklistCompletedEventHandler WorklistCompleted;
        
        /// <remarks/>
        public event WorklistOrderByColumnsCompletedEventHandler WorklistOrderByColumnsCompleted;
        
        /// <remarks/>
        public event WorklistByDateCompletedEventHandler WorklistByDateCompleted;
        
        /// <remarks/>
        public event WorklistByDateOrderByColumnsCompletedEventHandler WorklistByDateOrderByColumnsCompleted;
        
        /// <remarks/>
        public event ProcDefListCompletedEventHandler ProcDefListCompleted;
        
        /// <remarks/>
        public event ProcInstListCompletedEventHandler ProcInstListCompleted;
        
        /// <remarks/>
        public event ProcVarListCompletedEventHandler ProcVarListCompleted;
        
        /// <remarks/>
        public event ProcVarInstListCompletedEventHandler ProcVarInstListCompleted;
        
        /// <remarks/>
        public event SubProcVarListCompletedEventHandler SubProcVarListCompleted;
        
        /// <remarks/>
        public event InstructListCompletedEventHandler InstructListCompleted;
        
        /// <remarks/>
        public event DelOverdueStockCompletedEventHandler DelOverdueStockCompleted;
        
        /// <remarks/>
        public event ProcInstDeleteCompletedEventHandler ProcInstDeleteCompleted;
        
        /// <remarks/>
        public event UserIDListCompletedEventHandler UserIDListCompleted;
        
        /// <remarks/>
        public event OUIDListCompletedEventHandler OUIDListCompleted;
        
        /// <remarks/>
        public event RoleIDListCompletedEventHandler RoleIDListCompleted;
        
        /// <remarks/>
        public event GroupIDListCompletedEventHandler GroupIDListCompleted;
        
        /// <remarks/>
        public event OuUserIDListCompletedEventHandler OuUserIDListCompleted;
        
        /// <remarks/>
        public event RecursiveUserIDListCompletedEventHandler RecursiveUserIDListCompleted;
        
        /// <remarks/>
        public event GetUserSchemaCompletedEventHandler GetUserSchemaCompleted;
        
        /// <remarks/>
        public event OuRoleIDListCompletedEventHandler OuRoleIDListCompleted;
        
        /// <remarks/>
        public event GroupUserIDListCompletedEventHandler GroupUserIDListCompleted;
        
        /// <remarks/>
        public event UserIDLikeListCompletedEventHandler UserIDLikeListCompleted;
        
        /// <remarks/>
        public event NewestProcDefListCompletedEventHandler NewestProcDefListCompleted;
        
        /// <remarks/>
        public event ManWKItemTrackCompletedEventHandler ManWKItemTrackCompleted;
        
        /// <remarks/>
        public event WKItemTrackCompletedEventHandler WKItemTrackCompleted;
        
        /// <remarks/>
        public event WKItemTrackByWKItemIDCompletedEventHandler WKItemTrackByWKItemIDCompleted;
        
        /// <remarks/>
        public event WKItemTrackByWKItemKindCompletedEventHandler WKItemTrackByWKItemKindCompleted;
        
        /// <remarks/>
        public event RetrievalbeWKItemListCompletedEventHandler RetrievalbeWKItemListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Proce" +
            "ssVaribleChange", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ProcessVaribleChange(string vstrAPConnID, string vstrWFSendInfo) {
            object[] results = this.Invoke("ProcessVaribleChange", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessVaribleChangeAsync(string vstrAPConnID, string vstrWFSendInfo) {
            this.ProcessVaribleChangeAsync(vstrAPConnID, vstrWFSendInfo, null);
        }
        
        /// <remarks/>
        public void ProcessVaribleChangeAsync(string vstrAPConnID, string vstrWFSendInfo, object userState) {
            if ((this.ProcessVaribleChangeOperationCompleted == null)) {
                this.ProcessVaribleChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessVaribleChangeOperationCompleted);
            }
            this.InvokeAsync("ProcessVaribleChange", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo}, this.ProcessVaribleChangeOperationCompleted, userState);
        }
        
        private void OnProcessVaribleChangeOperationCompleted(object arg) {
            if ((this.ProcessVaribleChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessVaribleChangeCompleted(this, new ProcessVaribleChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/MailI" +
            "temInINSTStateChange", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailItemInINSTStateChange(string vstrAPConnID, string vstrMailItemID, enuMailState venuMailState) {
            object[] results = this.Invoke("MailItemInINSTStateChange", new object[] {
                        vstrAPConnID,
                        vstrMailItemID,
                        venuMailState});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailItemInINSTStateChangeAsync(string vstrAPConnID, string vstrMailItemID, enuMailState venuMailState) {
            this.MailItemInINSTStateChangeAsync(vstrAPConnID, vstrMailItemID, venuMailState, null);
        }
        
        /// <remarks/>
        public void MailItemInINSTStateChangeAsync(string vstrAPConnID, string vstrMailItemID, enuMailState venuMailState, object userState) {
            if ((this.MailItemInINSTStateChangeOperationCompleted == null)) {
                this.MailItemInINSTStateChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailItemInINSTStateChangeOperationCompleted);
            }
            this.InvokeAsync("MailItemInINSTStateChange", new object[] {
                        vstrAPConnID,
                        vstrMailItemID,
                        venuMailState}, this.MailItemInINSTStateChangeOperationCompleted, userState);
        }
        
        private void OnMailItemInINSTStateChangeOperationCompleted(object arg) {
            if ((this.MailItemInINSTStateChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailItemInINSTStateChangeCompleted(this, new MailItemInINSTStateChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ActPt" +
            "cpChange", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ActPtcpChange(string vstrAPConnID, string vstrActInstID, string vstrActPtcpInfo) {
            object[] results = this.Invoke("ActPtcpChange", new object[] {
                        vstrAPConnID,
                        vstrActInstID,
                        vstrActPtcpInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ActPtcpChangeAsync(string vstrAPConnID, string vstrActInstID, string vstrActPtcpInfo) {
            this.ActPtcpChangeAsync(vstrAPConnID, vstrActInstID, vstrActPtcpInfo, null);
        }
        
        /// <remarks/>
        public void ActPtcpChangeAsync(string vstrAPConnID, string vstrActInstID, string vstrActPtcpInfo, object userState) {
            if ((this.ActPtcpChangeOperationCompleted == null)) {
                this.ActPtcpChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActPtcpChangeOperationCompleted);
            }
            this.InvokeAsync("ActPtcpChange", new object[] {
                        vstrAPConnID,
                        vstrActInstID,
                        vstrActPtcpInfo}, this.ActPtcpChangeOperationCompleted, userState);
        }
        
        private void OnActPtcpChangeOperationCompleted(object arg) {
            if ((this.ActPtcpChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActPtcpChangeCompleted(this, new ActPtcpChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/GetAc" +
            "tPtcpInst", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActPtcpInst(string vstrAPConnID, string vstrActInstID, string vstrPtcpID) {
            object[] results = this.Invoke("GetActPtcpInst", new object[] {
                        vstrAPConnID,
                        vstrActInstID,
                        vstrPtcpID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetActPtcpInstAsync(string vstrAPConnID, string vstrActInstID, string vstrPtcpID) {
            this.GetActPtcpInstAsync(vstrAPConnID, vstrActInstID, vstrPtcpID, null);
        }
        
        /// <remarks/>
        public void GetActPtcpInstAsync(string vstrAPConnID, string vstrActInstID, string vstrPtcpID, object userState) {
            if ((this.GetActPtcpInstOperationCompleted == null)) {
                this.GetActPtcpInstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActPtcpInstOperationCompleted);
            }
            this.InvokeAsync("GetActPtcpInst", new object[] {
                        vstrAPConnID,
                        vstrActInstID,
                        vstrPtcpID}, this.GetActPtcpInstOperationCompleted, userState);
        }
        
        private void OnGetActPtcpInstOperationCompleted(object arg) {
            if ((this.GetActPtcpInstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActPtcpInstCompleted(this, new GetActPtcpInstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/MailI" +
            "temInINSTChange", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailItemInINSTChange(string vstrAPConnID, string vstrWFSendInfo, string vstrMailItemInfo, bool vblnDefaultMail) {
            object[] results = this.Invoke("MailItemInINSTChange", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrMailItemInfo,
                        vblnDefaultMail});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailItemInINSTChangeAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrMailItemInfo, bool vblnDefaultMail) {
            this.MailItemInINSTChangeAsync(vstrAPConnID, vstrWFSendInfo, vstrMailItemInfo, vblnDefaultMail, null);
        }
        
        /// <remarks/>
        public void MailItemInINSTChangeAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrMailItemInfo, bool vblnDefaultMail, object userState) {
            if ((this.MailItemInINSTChangeOperationCompleted == null)) {
                this.MailItemInINSTChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailItemInINSTChangeOperationCompleted);
            }
            this.InvokeAsync("MailItemInINSTChange", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrMailItemInfo,
                        vblnDefaultMail}, this.MailItemInINSTChangeOperationCompleted, userState);
        }
        
        private void OnMailItemInINSTChangeOperationCompleted(object arg) {
            if ((this.MailItemInINSTChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailItemInINSTChangeCompleted(this, new MailItemInINSTChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcV" +
            "arInstListByWKItemID", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcVarInstListByWKItemID(string vstrAPConnID, string vstrWKItemID) {
            object[] results = this.Invoke("ProcVarInstListByWKItemID", new object[] {
                        vstrAPConnID,
                        vstrWKItemID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcVarInstListByWKItemIDAsync(string vstrAPConnID, string vstrWKItemID) {
            this.ProcVarInstListByWKItemIDAsync(vstrAPConnID, vstrWKItemID, null);
        }
        
        /// <remarks/>
        public void ProcVarInstListByWKItemIDAsync(string vstrAPConnID, string vstrWKItemID, object userState) {
            if ((this.ProcVarInstListByWKItemIDOperationCompleted == null)) {
                this.ProcVarInstListByWKItemIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcVarInstListByWKItemIDOperationCompleted);
            }
            this.InvokeAsync("ProcVarInstListByWKItemID", new object[] {
                        vstrAPConnID,
                        vstrWKItemID}, this.ProcVarInstListByWKItemIDOperationCompleted, userState);
        }
        
        private void OnProcVarInstListByWKItemIDOperationCompleted(object arg) {
            if ((this.ProcVarInstListByWKItemIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcVarInstListByWKItemIDCompleted(this, new ProcVarInstListByWKItemIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/WKIte" +
            "mPtcpInstChange", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WKItemPtcpInstChange(string vstrAPConnID, string vstrWFSendInfo) {
            object[] results = this.Invoke("WKItemPtcpInstChange", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WKItemPtcpInstChangeAsync(string vstrAPConnID, string vstrWFSendInfo) {
            this.WKItemPtcpInstChangeAsync(vstrAPConnID, vstrWFSendInfo, null);
        }
        
        /// <remarks/>
        public void WKItemPtcpInstChangeAsync(string vstrAPConnID, string vstrWFSendInfo, object userState) {
            if ((this.WKItemPtcpInstChangeOperationCompleted == null)) {
                this.WKItemPtcpInstChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWKItemPtcpInstChangeOperationCompleted);
            }
            this.InvokeAsync("WKItemPtcpInstChange", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo}, this.WKItemPtcpInstChangeOperationCompleted, userState);
        }
        
        private void OnWKItemPtcpInstChangeOperationCompleted(object arg) {
            if ((this.WKItemPtcpInstChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WKItemPtcpInstChangeCompleted(this, new WKItemPtcpInstChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/SysVa" +
            "rList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SysVarList(string vstrAPConnID) {
            object[] results = this.Invoke("SysVarList", new object[] {
                        vstrAPConnID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SysVarListAsync(string vstrAPConnID) {
            this.SysVarListAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void SysVarListAsync(string vstrAPConnID, object userState) {
            if ((this.SysVarListOperationCompleted == null)) {
                this.SysVarListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSysVarListOperationCompleted);
            }
            this.InvokeAsync("SysVarList", new object[] {
                        vstrAPConnID}, this.SysVarListOperationCompleted, userState);
        }
        
        private void OnSysVarListOperationCompleted(object arg) {
            if ((this.SysVarListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SysVarListCompleted(this, new SysVarListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Check" +
            "WKItemPtcpUsr", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckWKItemPtcpUsr(string vstrAPConnID, string vstrWFSendInfo) {
            object[] results = this.Invoke("CheckWKItemPtcpUsr", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckWKItemPtcpUsrAsync(string vstrAPConnID, string vstrWFSendInfo) {
            this.CheckWKItemPtcpUsrAsync(vstrAPConnID, vstrWFSendInfo, null);
        }
        
        /// <remarks/>
        public void CheckWKItemPtcpUsrAsync(string vstrAPConnID, string vstrWFSendInfo, object userState) {
            if ((this.CheckWKItemPtcpUsrOperationCompleted == null)) {
                this.CheckWKItemPtcpUsrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckWKItemPtcpUsrOperationCompleted);
            }
            this.InvokeAsync("CheckWKItemPtcpUsr", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo}, this.CheckWKItemPtcpUsrOperationCompleted, userState);
        }
        
        private void OnCheckWKItemPtcpUsrOperationCompleted(object arg) {
            if ((this.CheckWKItemPtcpUsrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckWKItemPtcpUsrCompleted(this, new CheckWKItemPtcpUsrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/GetNe" +
            "xtManActPtcpPreView", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNextManActPtcpPreView(string vstrAPConnID, string vstrWFSendInfo) {
            object[] results = this.Invoke("GetNextManActPtcpPreView", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextManActPtcpPreViewAsync(string vstrAPConnID, string vstrWFSendInfo) {
            this.GetNextManActPtcpPreViewAsync(vstrAPConnID, vstrWFSendInfo, null);
        }
        
        /// <remarks/>
        public void GetNextManActPtcpPreViewAsync(string vstrAPConnID, string vstrWFSendInfo, object userState) {
            if ((this.GetNextManActPtcpPreViewOperationCompleted == null)) {
                this.GetNextManActPtcpPreViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextManActPtcpPreViewOperationCompleted);
            }
            this.InvokeAsync("GetNextManActPtcpPreView", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo}, this.GetNextManActPtcpPreViewOperationCompleted, userState);
        }
        
        private void OnGetNextManActPtcpPreViewOperationCompleted(object arg) {
            if ((this.GetNextManActPtcpPreViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextManActPtcpPreViewCompleted(this, new GetNextManActPtcpPreViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ManWK" +
            "ItemReActive", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ManWKItemReActive(string vstrAPConnID, string vstrWFSendInfo) {
            object[] results = this.Invoke("ManWKItemReActive", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ManWKItemReActiveAsync(string vstrAPConnID, string vstrWFSendInfo) {
            this.ManWKItemReActiveAsync(vstrAPConnID, vstrWFSendInfo, null);
        }
        
        /// <remarks/>
        public void ManWKItemReActiveAsync(string vstrAPConnID, string vstrWFSendInfo, object userState) {
            if ((this.ManWKItemReActiveOperationCompleted == null)) {
                this.ManWKItemReActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManWKItemReActiveOperationCompleted);
            }
            this.InvokeAsync("ManWKItemReActive", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo}, this.ManWKItemReActiveOperationCompleted, userState);
        }
        
        private void OnManWKItemReActiveOperationCompleted(object arg) {
            if ((this.ManWKItemReActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManWKItemReActiveCompleted(this, new ManWKItemReActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Backw" +
            "ardLastProWithoutRecord", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackwardLastProWithoutRecord(string vstrAPConnID, string vstrWFSendInfo) {
            object[] results = this.Invoke("BackwardLastProWithoutRecord", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackwardLastProWithoutRecordAsync(string vstrAPConnID, string vstrWFSendInfo) {
            this.BackwardLastProWithoutRecordAsync(vstrAPConnID, vstrWFSendInfo, null);
        }
        
        /// <remarks/>
        public void BackwardLastProWithoutRecordAsync(string vstrAPConnID, string vstrWFSendInfo, object userState) {
            if ((this.BackwardLastProWithoutRecordOperationCompleted == null)) {
                this.BackwardLastProWithoutRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackwardLastProWithoutRecordOperationCompleted);
            }
            this.InvokeAsync("BackwardLastProWithoutRecord", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo}, this.BackwardLastProWithoutRecordOperationCompleted, userState);
        }
        
        private void OnBackwardLastProWithoutRecordOperationCompleted(object arg) {
            if ((this.BackwardLastProWithoutRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackwardLastProWithoutRecordCompleted(this, new BackwardLastProWithoutRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Verif" +
            "yMailItem", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyMailItem(string vstrAPConnID) {
            object[] results = this.Invoke("VerifyMailItem", new object[] {
                        vstrAPConnID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyMailItemAsync(string vstrAPConnID) {
            this.VerifyMailItemAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void VerifyMailItemAsync(string vstrAPConnID, object userState) {
            if ((this.VerifyMailItemOperationCompleted == null)) {
                this.VerifyMailItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyMailItemOperationCompleted);
            }
            this.InvokeAsync("VerifyMailItem", new object[] {
                        vstrAPConnID}, this.VerifyMailItemOperationCompleted, userState);
        }
        
        private void OnVerifyMailItemOperationCompleted(object arg) {
            if ((this.VerifyMailItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyMailItemCompleted(this, new VerifyMailItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Verif" +
            "yWKItemPtcp", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyWKItemPtcp(string vstrAPConnID) {
            object[] results = this.Invoke("VerifyWKItemPtcp", new object[] {
                        vstrAPConnID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyWKItemPtcpAsync(string vstrAPConnID) {
            this.VerifyWKItemPtcpAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void VerifyWKItemPtcpAsync(string vstrAPConnID, object userState) {
            if ((this.VerifyWKItemPtcpOperationCompleted == null)) {
                this.VerifyWKItemPtcpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyWKItemPtcpOperationCompleted);
            }
            this.InvokeAsync("VerifyWKItemPtcp", new object[] {
                        vstrAPConnID}, this.VerifyWKItemPtcpOperationCompleted, userState);
        }
        
        private void OnVerifyWKItemPtcpOperationCompleted(object arg) {
            if ((this.VerifyWKItemPtcpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyWKItemPtcpCompleted(this, new VerifyWKItemPtcpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/UserR" +
            "olChk", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserRolChk(string vstrAPConnID, string vstrUserID, string vstrCompID, string vstrRolID) {
            object[] results = this.Invoke("UserRolChk", new object[] {
                        vstrAPConnID,
                        vstrUserID,
                        vstrCompID,
                        vstrRolID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserRolChkAsync(string vstrAPConnID, string vstrUserID, string vstrCompID, string vstrRolID) {
            this.UserRolChkAsync(vstrAPConnID, vstrUserID, vstrCompID, vstrRolID, null);
        }
        
        /// <remarks/>
        public void UserRolChkAsync(string vstrAPConnID, string vstrUserID, string vstrCompID, string vstrRolID, object userState) {
            if ((this.UserRolChkOperationCompleted == null)) {
                this.UserRolChkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserRolChkOperationCompleted);
            }
            this.InvokeAsync("UserRolChk", new object[] {
                        vstrAPConnID,
                        vstrUserID,
                        vstrCompID,
                        vstrRolID}, this.UserRolChkOperationCompleted, userState);
        }
        
        private void OnUserRolChkOperationCompleted(object arg) {
            if ((this.UserRolChkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserRolChkCompleted(this, new UserRolChkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/UserO" +
            "UID", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserOUID(string vstrAPConnID, string vstrUserID, string vstrCompID) {
            object[] results = this.Invoke("UserOUID", new object[] {
                        vstrAPConnID,
                        vstrUserID,
                        vstrCompID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserOUIDAsync(string vstrAPConnID, string vstrUserID, string vstrCompID) {
            this.UserOUIDAsync(vstrAPConnID, vstrUserID, vstrCompID, null);
        }
        
        /// <remarks/>
        public void UserOUIDAsync(string vstrAPConnID, string vstrUserID, string vstrCompID, object userState) {
            if ((this.UserOUIDOperationCompleted == null)) {
                this.UserOUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserOUIDOperationCompleted);
            }
            this.InvokeAsync("UserOUID", new object[] {
                        vstrAPConnID,
                        vstrUserID,
                        vstrCompID}, this.UserOUIDOperationCompleted, userState);
        }
        
        private void OnUserOUIDOperationCompleted(object arg) {
            if ((this.UserOUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserOUIDCompleted(this, new UserOUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/SCLoa" +
            "dUser", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SCLoadUser(string vstrAPConnID, string vstrCompID, string vstrUserID) {
            object[] results = this.Invoke("SCLoadUser", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SCLoadUserAsync(string vstrAPConnID, string vstrCompID, string vstrUserID) {
            this.SCLoadUserAsync(vstrAPConnID, vstrCompID, vstrUserID, null);
        }
        
        /// <remarks/>
        public void SCLoadUserAsync(string vstrAPConnID, string vstrCompID, string vstrUserID, object userState) {
            if ((this.SCLoadUserOperationCompleted == null)) {
                this.SCLoadUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCLoadUserOperationCompleted);
            }
            this.InvokeAsync("SCLoadUser", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID}, this.SCLoadUserOperationCompleted, userState);
        }
        
        private void OnSCLoadUserOperationCompleted(object arg) {
            if ((this.SCLoadUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCLoadUserCompleted(this, new SCLoadUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/SCLog" +
            "inCheck", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SCLoginCheck(string vstrAPConnID, string vstrCompID, string vstrUserID, string vstrPassword) {
            object[] results = this.Invoke("SCLoginCheck", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID,
                        vstrPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SCLoginCheckAsync(string vstrAPConnID, string vstrCompID, string vstrUserID, string vstrPassword) {
            this.SCLoginCheckAsync(vstrAPConnID, vstrCompID, vstrUserID, vstrPassword, null);
        }
        
        /// <remarks/>
        public void SCLoginCheckAsync(string vstrAPConnID, string vstrCompID, string vstrUserID, string vstrPassword, object userState) {
            if ((this.SCLoginCheckOperationCompleted == null)) {
                this.SCLoginCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCLoginCheckOperationCompleted);
            }
            this.InvokeAsync("SCLoginCheck", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID,
                        vstrPassword}, this.SCLoginCheckOperationCompleted, userState);
        }
        
        private void OnSCLoginCheckOperationCompleted(object arg) {
            if ((this.SCLoginCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCLoginCheckCompleted(this, new SCLoginCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstListByProsecutor", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstListByProsecutor(string vstrAPConnID, string vstrCompID, string vstrUserID, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            object[] results = this.Invoke("ProcInstListByProsecutor", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstListByProsecutorAsync(string vstrAPConnID, string vstrCompID, string vstrUserID, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            this.ProcInstListByProsecutorAsync(vstrAPConnID, vstrCompID, vstrUserID, vdtmStart, vdtmEnd, venuFlgPeriod, null);
        }
        
        /// <remarks/>
        public void ProcInstListByProsecutorAsync(string vstrAPConnID, string vstrCompID, string vstrUserID, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod, object userState) {
            if ((this.ProcInstListByProsecutorOperationCompleted == null)) {
                this.ProcInstListByProsecutorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstListByProsecutorOperationCompleted);
            }
            this.InvokeAsync("ProcInstListByProsecutor", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod}, this.ProcInstListByProsecutorOperationCompleted, userState);
        }
        
        private void OnProcInstListByProsecutorOperationCompleted(object arg) {
            if ((this.ProcInstListByProsecutorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstListByProsecutorCompleted(this, new ProcInstListByProsecutorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstListByProposerAndProcState", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstListByProposerAndProcState(string vstrAPConnID, string vstrCompID, string vstrUserID, string vstrProcInstState, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            object[] results = this.Invoke("ProcInstListByProposerAndProcState", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID,
                        vstrProcInstState,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstListByProposerAndProcStateAsync(string vstrAPConnID, string vstrCompID, string vstrUserID, string vstrProcInstState, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            this.ProcInstListByProposerAndProcStateAsync(vstrAPConnID, vstrCompID, vstrUserID, vstrProcInstState, vdtmStart, vdtmEnd, venuFlgPeriod, null);
        }
        
        /// <remarks/>
        public void ProcInstListByProposerAndProcStateAsync(string vstrAPConnID, string vstrCompID, string vstrUserID, string vstrProcInstState, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod, object userState) {
            if ((this.ProcInstListByProposerAndProcStateOperationCompleted == null)) {
                this.ProcInstListByProposerAndProcStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstListByProposerAndProcStateOperationCompleted);
            }
            this.InvokeAsync("ProcInstListByProposerAndProcState", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID,
                        vstrProcInstState,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod}, this.ProcInstListByProposerAndProcStateOperationCompleted, userState);
        }
        
        private void OnProcInstListByProposerAndProcStateOperationCompleted(object arg) {
            if ((this.ProcInstListByProposerAndProcStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstListByProposerAndProcStateCompleted(this, new ProcInstListByProposerAndProcStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstListByProposer", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstListByProposer(string vstrAPConnID, string vstrCompID, string vstrUserID, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            object[] results = this.Invoke("ProcInstListByProposer", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstListByProposerAsync(string vstrAPConnID, string vstrCompID, string vstrUserID, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            this.ProcInstListByProposerAsync(vstrAPConnID, vstrCompID, vstrUserID, vdtmStart, vdtmEnd, venuFlgPeriod, null);
        }
        
        /// <remarks/>
        public void ProcInstListByProposerAsync(string vstrAPConnID, string vstrCompID, string vstrUserID, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod, object userState) {
            if ((this.ProcInstListByProposerOperationCompleted == null)) {
                this.ProcInstListByProposerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstListByProposerOperationCompleted);
            }
            this.InvokeAsync("ProcInstListByProposer", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUserID,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod}, this.ProcInstListByProposerOperationCompleted, userState);
        }
        
        private void OnProcInstListByProposerOperationCompleted(object arg) {
            if ((this.ProcInstListByProposerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstListByProposerCompleted(this, new ProcInstListByProposerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstListByProcState", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstListByProcState(string vstrAPConnID, System.DateTime vdtmStart, System.DateTime vdtmEnd, string vstrProcInstState, enuFlgPeriod venuFlgPeriod) {
            object[] results = this.Invoke("ProcInstListByProcState", new object[] {
                        vstrAPConnID,
                        vdtmStart,
                        vdtmEnd,
                        vstrProcInstState,
                        venuFlgPeriod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstListByProcStateAsync(string vstrAPConnID, System.DateTime vdtmStart, System.DateTime vdtmEnd, string vstrProcInstState, enuFlgPeriod venuFlgPeriod) {
            this.ProcInstListByProcStateAsync(vstrAPConnID, vdtmStart, vdtmEnd, vstrProcInstState, venuFlgPeriod, null);
        }
        
        /// <remarks/>
        public void ProcInstListByProcStateAsync(string vstrAPConnID, System.DateTime vdtmStart, System.DateTime vdtmEnd, string vstrProcInstState, enuFlgPeriod venuFlgPeriod, object userState) {
            if ((this.ProcInstListByProcStateOperationCompleted == null)) {
                this.ProcInstListByProcStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstListByProcStateOperationCompleted);
            }
            this.InvokeAsync("ProcInstListByProcState", new object[] {
                        vstrAPConnID,
                        vdtmStart,
                        vdtmEnd,
                        vstrProcInstState,
                        venuFlgPeriod}, this.ProcInstListByProcStateOperationCompleted, userState);
        }
        
        private void OnProcInstListByProcStateOperationCompleted(object arg) {
            if ((this.ProcInstListByProcStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstListByProcStateCompleted(this, new ProcInstListByProcStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstListByDate", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstListByDate(string vstrAPConnID, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            object[] results = this.Invoke("ProcInstListByDate", new object[] {
                        vstrAPConnID,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstListByDateAsync(string vstrAPConnID, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            this.ProcInstListByDateAsync(vstrAPConnID, vdtmStart, vdtmEnd, venuFlgPeriod, null);
        }
        
        /// <remarks/>
        public void ProcInstListByDateAsync(string vstrAPConnID, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod, object userState) {
            if ((this.ProcInstListByDateOperationCompleted == null)) {
                this.ProcInstListByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstListByDateOperationCompleted);
            }
            this.InvokeAsync("ProcInstListByDate", new object[] {
                        vstrAPConnID,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod}, this.ProcInstListByDateOperationCompleted, userState);
        }
        
        private void OnProcInstListByDateOperationCompleted(object arg) {
            if ((this.ProcInstListByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstListByDateCompleted(this, new ProcInstListByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ManAc" +
            "tInstAddNext", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ManActInstAddNext(string vstrAPConnID, enuFlgRouteType venuFlgRouteType, enuActKind venuCurrentActInstKind, string vstrCurrentActInstID, string vstrManActInstCompInfo) {
            object[] results = this.Invoke("ManActInstAddNext", new object[] {
                        vstrAPConnID,
                        venuFlgRouteType,
                        venuCurrentActInstKind,
                        vstrCurrentActInstID,
                        vstrManActInstCompInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ManActInstAddNextAsync(string vstrAPConnID, enuFlgRouteType venuFlgRouteType, enuActKind venuCurrentActInstKind, string vstrCurrentActInstID, string vstrManActInstCompInfo) {
            this.ManActInstAddNextAsync(vstrAPConnID, venuFlgRouteType, venuCurrentActInstKind, vstrCurrentActInstID, vstrManActInstCompInfo, null);
        }
        
        /// <remarks/>
        public void ManActInstAddNextAsync(string vstrAPConnID, enuFlgRouteType venuFlgRouteType, enuActKind venuCurrentActInstKind, string vstrCurrentActInstID, string vstrManActInstCompInfo, object userState) {
            if ((this.ManActInstAddNextOperationCompleted == null)) {
                this.ManActInstAddNextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManActInstAddNextOperationCompleted);
            }
            this.InvokeAsync("ManActInstAddNext", new object[] {
                        vstrAPConnID,
                        venuFlgRouteType,
                        venuCurrentActInstKind,
                        vstrCurrentActInstID,
                        vstrManActInstCompInfo}, this.ManActInstAddNextOperationCompleted, userState);
        }
        
        private void OnManActInstAddNextOperationCompleted(object arg) {
            if ((this.ManActInstAddNextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManActInstAddNextCompleted(this, new ManActInstAddNextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcS" +
            "tockDel", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcStockDel(string vstrAPConnID, string vstrProcDefID, int vintProcVer) {
            object[] results = this.Invoke("ProcStockDel", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcStockDelAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer) {
            this.ProcStockDelAsync(vstrAPConnID, vstrProcDefID, vintProcVer, null);
        }
        
        /// <remarks/>
        public void ProcStockDelAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer, object userState) {
            if ((this.ProcStockDelOperationCompleted == null)) {
                this.ProcStockDelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcStockDelOperationCompleted);
            }
            this.InvokeAsync("ProcStockDel", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer}, this.ProcStockDelOperationCompleted, userState);
        }
        
        private void OnProcStockDelOperationCompleted(object arg) {
            if ((this.ProcStockDelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcStockDelCompleted(this, new ProcStockDelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/MailI" +
            "temDelete", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MailItemDelete(string vstrAPConnID, enuMailState venuMailState, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            object[] results = this.Invoke("MailItemDelete", new object[] {
                        vstrAPConnID,
                        venuMailState,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MailItemDeleteAsync(string vstrAPConnID, enuMailState venuMailState, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            this.MailItemDeleteAsync(vstrAPConnID, venuMailState, vdtmStart, vdtmEnd, venuFlgPeriod, null);
        }
        
        /// <remarks/>
        public void MailItemDeleteAsync(string vstrAPConnID, enuMailState venuMailState, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod, object userState) {
            if ((this.MailItemDeleteOperationCompleted == null)) {
                this.MailItemDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailItemDeleteOperationCompleted);
            }
            this.InvokeAsync("MailItemDelete", new object[] {
                        vstrAPConnID,
                        venuMailState,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod}, this.MailItemDeleteOperationCompleted, userState);
        }
        
        private void OnMailItemDeleteOperationCompleted(object arg) {
            if ((this.MailItemDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailItemDeleteCompleted(this, new MailItemDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Seque" +
            "nceDelete", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SequenceDelete(string vstrAPConnID) {
            object[] results = this.Invoke("SequenceDelete", new object[] {
                        vstrAPConnID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SequenceDeleteAsync(string vstrAPConnID) {
            this.SequenceDeleteAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void SequenceDeleteAsync(string vstrAPConnID, object userState) {
            if ((this.SequenceDeleteOperationCompleted == null)) {
                this.SequenceDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSequenceDeleteOperationCompleted);
            }
            this.InvokeAsync("SequenceDelete", new object[] {
                        vstrAPConnID}, this.SequenceDeleteOperationCompleted, userState);
        }
        
        private void OnSequenceDeleteOperationCompleted(object arg) {
            if ((this.SequenceDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SequenceDeleteCompleted(this, new SequenceDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/UndoF" +
            "iling", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UndoFiling(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProc) {
            object[] results = this.Invoke("UndoFiling", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vblnIncludeSubProc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UndoFilingAsync(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProc) {
            this.UndoFilingAsync(vstrAPConnID, vstrProcInstID, vblnIncludeSubProc, null);
        }
        
        /// <remarks/>
        public void UndoFilingAsync(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProc, object userState) {
            if ((this.UndoFilingOperationCompleted == null)) {
                this.UndoFilingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUndoFilingOperationCompleted);
            }
            this.InvokeAsync("UndoFiling", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vblnIncludeSubProc}, this.UndoFilingOperationCompleted, userState);
        }
        
        private void OnUndoFilingOperationCompleted(object arg) {
            if ((this.UndoFilingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UndoFilingCompleted(this, new UndoFilingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstExport", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstExport(string vstrAPConnID, string vstrProcInstID, enuFlgPeriod venuFlgPeriod, string vstrFileName) {
            object[] results = this.Invoke("ProcInstExport", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        venuFlgPeriod,
                        vstrFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstExportAsync(string vstrAPConnID, string vstrProcInstID, enuFlgPeriod venuFlgPeriod, string vstrFileName) {
            this.ProcInstExportAsync(vstrAPConnID, vstrProcInstID, venuFlgPeriod, vstrFileName, null);
        }
        
        /// <remarks/>
        public void ProcInstExportAsync(string vstrAPConnID, string vstrProcInstID, enuFlgPeriod venuFlgPeriod, string vstrFileName, object userState) {
            if ((this.ProcInstExportOperationCompleted == null)) {
                this.ProcInstExportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstExportOperationCompleted);
            }
            this.InvokeAsync("ProcInstExport", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        venuFlgPeriod,
                        vstrFileName}, this.ProcInstExportOperationCompleted, userState);
        }
        
        private void OnProcInstExportOperationCompleted(object arg) {
            if ((this.ProcInstExportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstExportCompleted(this, new ProcInstExportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstDel", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstDel(string vstrAPConnID, string vstrProcInstID, enuFlgPeriod venuFlgPeriod) {
            object[] results = this.Invoke("ProcInstDel", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        venuFlgPeriod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstDelAsync(string vstrAPConnID, string vstrProcInstID, enuFlgPeriod venuFlgPeriod) {
            this.ProcInstDelAsync(vstrAPConnID, vstrProcInstID, venuFlgPeriod, null);
        }
        
        /// <remarks/>
        public void ProcInstDelAsync(string vstrAPConnID, string vstrProcInstID, enuFlgPeriod venuFlgPeriod, object userState) {
            if ((this.ProcInstDelOperationCompleted == null)) {
                this.ProcInstDelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstDelOperationCompleted);
            }
            this.InvokeAsync("ProcInstDel", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        venuFlgPeriod}, this.ProcInstDelOperationCompleted, userState);
        }
        
        private void OnProcInstDelOperationCompleted(object arg) {
            if ((this.ProcInstDelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstDelCompleted(this, new ProcInstDelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstImport", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstImport(string vstrAPConnID, string vstrFileName, bool vblnDelIfExist) {
            object[] results = this.Invoke("ProcInstImport", new object[] {
                        vstrAPConnID,
                        vstrFileName,
                        vblnDelIfExist});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstImportAsync(string vstrAPConnID, string vstrFileName, bool vblnDelIfExist) {
            this.ProcInstImportAsync(vstrAPConnID, vstrFileName, vblnDelIfExist, null);
        }
        
        /// <remarks/>
        public void ProcInstImportAsync(string vstrAPConnID, string vstrFileName, bool vblnDelIfExist, object userState) {
            if ((this.ProcInstImportOperationCompleted == null)) {
                this.ProcInstImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstImportOperationCompleted);
            }
            this.InvokeAsync("ProcInstImport", new object[] {
                        vstrAPConnID,
                        vstrFileName,
                        vblnDelIfExist}, this.ProcInstImportOperationCompleted, userState);
        }
        
        private void OnProcInstImportOperationCompleted(object arg) {
            if ((this.ProcInstImportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstImportCompleted(this, new ProcInstImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstListByProcDefID", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstListByProcDefID(string vstrAPConnID, string vstrProcDefID, string vstrProcVer, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            object[] results = this.Invoke("ProcInstListByProcDefID", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vstrProcVer,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstListByProcDefIDAsync(string vstrAPConnID, string vstrProcDefID, string vstrProcVer, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod) {
            this.ProcInstListByProcDefIDAsync(vstrAPConnID, vstrProcDefID, vstrProcVer, vdtmStart, vdtmEnd, venuFlgPeriod, null);
        }
        
        /// <remarks/>
        public void ProcInstListByProcDefIDAsync(string vstrAPConnID, string vstrProcDefID, string vstrProcVer, System.DateTime vdtmStart, System.DateTime vdtmEnd, enuFlgPeriod venuFlgPeriod, object userState) {
            if ((this.ProcInstListByProcDefIDOperationCompleted == null)) {
                this.ProcInstListByProcDefIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstListByProcDefIDOperationCompleted);
            }
            this.InvokeAsync("ProcInstListByProcDefID", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vstrProcVer,
                        vdtmStart,
                        vdtmEnd,
                        venuFlgPeriod}, this.ProcInstListByProcDefIDOperationCompleted, userState);
        }
        
        private void OnProcInstListByProcDefIDOperationCompleted(object arg) {
            if ((this.ProcInstListByProcDefIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstListByProcDefIDCompleted(this, new ProcInstListByProcDefIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ForJu" +
            "mpActList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ForJumpActList(string vstrAPConnID, string vstrProcInstID, string vstrActInstID) {
            object[] results = this.Invoke("ForJumpActList", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vstrActInstID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ForJumpActListAsync(string vstrAPConnID, string vstrProcInstID, string vstrActInstID) {
            this.ForJumpActListAsync(vstrAPConnID, vstrProcInstID, vstrActInstID, null);
        }
        
        /// <remarks/>
        public void ForJumpActListAsync(string vstrAPConnID, string vstrProcInstID, string vstrActInstID, object userState) {
            if ((this.ForJumpActListOperationCompleted == null)) {
                this.ForJumpActListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForJumpActListOperationCompleted);
            }
            this.InvokeAsync("ForJumpActList", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vstrActInstID}, this.ForJumpActListOperationCompleted, userState);
        }
        
        private void OnForJumpActListOperationCompleted(object arg) {
            if ((this.ForJumpActListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForJumpActListCompleted(this, new ForJumpActListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/BackJ" +
            "umpActList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackJumpActList(string vstrAPConnID, string vstrRootProcInstID, string vstrProcInstID, string vstrActInstID) {
            object[] results = this.Invoke("BackJumpActList", new object[] {
                        vstrAPConnID,
                        vstrRootProcInstID,
                        vstrProcInstID,
                        vstrActInstID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackJumpActListAsync(string vstrAPConnID, string vstrRootProcInstID, string vstrProcInstID, string vstrActInstID) {
            this.BackJumpActListAsync(vstrAPConnID, vstrRootProcInstID, vstrProcInstID, vstrActInstID, null);
        }
        
        /// <remarks/>
        public void BackJumpActListAsync(string vstrAPConnID, string vstrRootProcInstID, string vstrProcInstID, string vstrActInstID, object userState) {
            if ((this.BackJumpActListOperationCompleted == null)) {
                this.BackJumpActListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackJumpActListOperationCompleted);
            }
            this.InvokeAsync("BackJumpActList", new object[] {
                        vstrAPConnID,
                        vstrRootProcInstID,
                        vstrProcInstID,
                        vstrActInstID}, this.BackJumpActListOperationCompleted, userState);
        }
        
        private void OnBackJumpActListOperationCompleted(object arg) {
            if ((this.BackJumpActListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackJumpActListCompleted(this, new BackJumpActListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstDelayList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstDelayList(string vstrAPConnID, int vintDays, enuFlgWorkingTime venuFlgWorkingTime) {
            object[] results = this.Invoke("ProcInstDelayList", new object[] {
                        vstrAPConnID,
                        vintDays,
                        venuFlgWorkingTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstDelayListAsync(string vstrAPConnID, int vintDays, enuFlgWorkingTime venuFlgWorkingTime) {
            this.ProcInstDelayListAsync(vstrAPConnID, vintDays, venuFlgWorkingTime, null);
        }
        
        /// <remarks/>
        public void ProcInstDelayListAsync(string vstrAPConnID, int vintDays, enuFlgWorkingTime venuFlgWorkingTime, object userState) {
            if ((this.ProcInstDelayListOperationCompleted == null)) {
                this.ProcInstDelayListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstDelayListOperationCompleted);
            }
            this.InvokeAsync("ProcInstDelayList", new object[] {
                        vstrAPConnID,
                        vintDays,
                        venuFlgWorkingTime}, this.ProcInstDelayListOperationCompleted, userState);
        }
        
        private void OnProcInstDelayListOperationCompleted(object arg) {
            if ((this.ProcInstDelayListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstDelayListCompleted(this, new ProcInstDelayListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Start" +
            "", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Start(string vstrAPConnID, string vstrWFStartInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("Start", new object[] {
                        vstrAPConnID,
                        vstrWFStartInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartAsync(string vstrAPConnID, string vstrWFStartInfo, string vstrExtendDataInfo) {
            this.StartAsync(vstrAPConnID, vstrWFStartInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void StartAsync(string vstrAPConnID, string vstrWFStartInfo, string vstrExtendDataInfo, object userState) {
            if ((this.StartOperationCompleted == null)) {
                this.StartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartOperationCompleted);
            }
            this.InvokeAsync("Start", new object[] {
                        vstrAPConnID,
                        vstrWFStartInfo,
                        vstrExtendDataInfo}, this.StartOperationCompleted, userState);
        }
        
        private void OnStartOperationCompleted(object arg) {
            if ((this.StartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartCompleted(this, new StartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstSuspend", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstSuspend(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("ProcInstSuspend", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstSuspendAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.ProcInstSuspendAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void ProcInstSuspendAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.ProcInstSuspendOperationCompleted == null)) {
                this.ProcInstSuspendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstSuspendOperationCompleted);
            }
            this.InvokeAsync("ProcInstSuspend", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.ProcInstSuspendOperationCompleted, userState);
        }
        
        private void OnProcInstSuspendOperationCompleted(object arg) {
            if ((this.ProcInstSuspendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstSuspendCompleted(this, new ProcInstSuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstResume", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstResume(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("ProcInstResume", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstResumeAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.ProcInstResumeAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void ProcInstResumeAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.ProcInstResumeOperationCompleted == null)) {
                this.ProcInstResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstResumeOperationCompleted);
            }
            this.InvokeAsync("ProcInstResume", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.ProcInstResumeOperationCompleted, userState);
        }
        
        private void OnProcInstResumeOperationCompleted(object arg) {
            if ((this.ProcInstResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstResumeCompleted(this, new ProcInstResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstAbort", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstAbort(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("ProcInstAbort", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstAbortAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.ProcInstAbortAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void ProcInstAbortAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.ProcInstAbortOperationCompleted == null)) {
                this.ProcInstAbortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstAbortOperationCompleted);
            }
            this.InvokeAsync("ProcInstAbort", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.ProcInstAbortOperationCompleted, userState);
        }
        
        private void OnProcInstAbortOperationCompleted(object arg) {
            if ((this.ProcInstAbortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstAbortCompleted(this, new ProcInstAbortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Forwa" +
            "rd", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Forward(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("Forward", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ForwardAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.ForwardAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void ForwardAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.ForwardOperationCompleted == null)) {
                this.ForwardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForwardOperationCompleted);
            }
            this.InvokeAsync("Forward", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.ForwardOperationCompleted, userState);
        }
        
        private void OnForwardOperationCompleted(object arg) {
            if ((this.ForwardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForwardCompleted(this, new ForwardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Backw" +
            "ardLastPtcp", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackwardLastPtcp(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("BackwardLastPtcp", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackwardLastPtcpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.BackwardLastPtcpAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void BackwardLastPtcpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.BackwardLastPtcpOperationCompleted == null)) {
                this.BackwardLastPtcpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackwardLastPtcpOperationCompleted);
            }
            this.InvokeAsync("BackwardLastPtcp", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.BackwardLastPtcpOperationCompleted, userState);
        }
        
        private void OnBackwardLastPtcpOperationCompleted(object arg) {
            if ((this.BackwardLastPtcpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackwardLastPtcpCompleted(this, new BackwardLastPtcpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Backw" +
            "ardLastPro", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackwardLastPro(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("BackwardLastPro", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackwardLastProAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.BackwardLastProAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void BackwardLastProAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.BackwardLastProOperationCompleted == null)) {
                this.BackwardLastProOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackwardLastProOperationCompleted);
            }
            this.InvokeAsync("BackwardLastPro", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.BackwardLastProOperationCompleted, userState);
        }
        
        private void OnBackwardLastProOperationCompleted(object arg) {
            if ((this.BackwardLastProCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackwardLastProCompleted(this, new BackwardLastProCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Backw" +
            "ardWKItemPtcp", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackwardWKItemPtcp(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("BackwardWKItemPtcp", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackwardWKItemPtcpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.BackwardWKItemPtcpAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void BackwardWKItemPtcpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.BackwardWKItemPtcpOperationCompleted == null)) {
                this.BackwardWKItemPtcpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackwardWKItemPtcpOperationCompleted);
            }
            this.InvokeAsync("BackwardWKItemPtcp", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.BackwardWKItemPtcpOperationCompleted, userState);
        }
        
        private void OnBackwardWKItemPtcpOperationCompleted(object arg) {
            if ((this.BackwardWKItemPtcpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackwardWKItemPtcpCompleted(this, new BackwardWKItemPtcpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Backw" +
            "ardSomeone", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackwardSomeone(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("BackwardSomeone", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackwardSomeoneAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.BackwardSomeoneAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void BackwardSomeoneAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.BackwardSomeoneOperationCompleted == null)) {
                this.BackwardSomeoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackwardSomeoneOperationCompleted);
            }
            this.InvokeAsync("BackwardSomeone", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.BackwardSomeoneOperationCompleted, userState);
        }
        
        private void OnBackwardSomeoneOperationCompleted(object arg) {
            if ((this.BackwardSomeoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackwardSomeoneCompleted(this, new BackwardSomeoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ForJu" +
            "mp", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ForJump(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("ForJump", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ForJumpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.ForJumpAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void ForJumpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.ForJumpOperationCompleted == null)) {
                this.ForJumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForJumpOperationCompleted);
            }
            this.InvokeAsync("ForJump", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.ForJumpOperationCompleted, userState);
        }
        
        private void OnForJumpOperationCompleted(object arg) {
            if ((this.ForJumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForJumpCompleted(this, new ForJumpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ForJu" +
            "mpSomeone", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ForJumpSomeone(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("ForJumpSomeone", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ForJumpSomeoneAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.ForJumpSomeoneAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void ForJumpSomeoneAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.ForJumpSomeoneOperationCompleted == null)) {
                this.ForJumpSomeoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForJumpSomeoneOperationCompleted);
            }
            this.InvokeAsync("ForJumpSomeone", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.ForJumpSomeoneOperationCompleted, userState);
        }
        
        private void OnForJumpSomeoneOperationCompleted(object arg) {
            if ((this.ForJumpSomeoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForJumpSomeoneCompleted(this, new ForJumpSomeoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/BackJ" +
            "umpLastPtcp", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackJumpLastPtcp(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("BackJumpLastPtcp", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackJumpLastPtcpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.BackJumpLastPtcpAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void BackJumpLastPtcpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.BackJumpLastPtcpOperationCompleted == null)) {
                this.BackJumpLastPtcpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackJumpLastPtcpOperationCompleted);
            }
            this.InvokeAsync("BackJumpLastPtcp", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.BackJumpLastPtcpOperationCompleted, userState);
        }
        
        private void OnBackJumpLastPtcpOperationCompleted(object arg) {
            if ((this.BackJumpLastPtcpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackJumpLastPtcpCompleted(this, new BackJumpLastPtcpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/BackJ" +
            "umpLastPro", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackJumpLastPro(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("BackJumpLastPro", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackJumpLastProAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.BackJumpLastProAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void BackJumpLastProAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.BackJumpLastProOperationCompleted == null)) {
                this.BackJumpLastProOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackJumpLastProOperationCompleted);
            }
            this.InvokeAsync("BackJumpLastPro", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.BackJumpLastProOperationCompleted, userState);
        }
        
        private void OnBackJumpLastProOperationCompleted(object arg) {
            if ((this.BackJumpLastProCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackJumpLastProCompleted(this, new BackJumpLastProCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/BackJ" +
            "umpWKItemPtcp", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackJumpWKItemPtcp(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("BackJumpWKItemPtcp", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackJumpWKItemPtcpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.BackJumpWKItemPtcpAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void BackJumpWKItemPtcpAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.BackJumpWKItemPtcpOperationCompleted == null)) {
                this.BackJumpWKItemPtcpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackJumpWKItemPtcpOperationCompleted);
            }
            this.InvokeAsync("BackJumpWKItemPtcp", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.BackJumpWKItemPtcpOperationCompleted, userState);
        }
        
        private void OnBackJumpWKItemPtcpOperationCompleted(object arg) {
            if ((this.BackJumpWKItemPtcpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackJumpWKItemPtcpCompleted(this, new BackJumpWKItemPtcpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/BackJ" +
            "umpWKItemPro", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackJumpWKItemPro(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("BackJumpWKItemPro", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackJumpWKItemProAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.BackJumpWKItemProAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void BackJumpWKItemProAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.BackJumpWKItemProOperationCompleted == null)) {
                this.BackJumpWKItemProOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackJumpWKItemProOperationCompleted);
            }
            this.InvokeAsync("BackJumpWKItemPro", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.BackJumpWKItemProOperationCompleted, userState);
        }
        
        private void OnBackJumpWKItemProOperationCompleted(object arg) {
            if ((this.BackJumpWKItemProCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackJumpWKItemProCompleted(this, new BackJumpWKItemProCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/BackJ" +
            "umpSomeone", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackJumpSomeone(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("BackJumpSomeone", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackJumpSomeoneAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.BackJumpSomeoneAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void BackJumpSomeoneAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.BackJumpSomeoneOperationCompleted == null)) {
                this.BackJumpSomeoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackJumpSomeoneOperationCompleted);
            }
            this.InvokeAsync("BackJumpSomeone", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.BackJumpSomeoneOperationCompleted, userState);
        }
        
        private void OnBackJumpSomeoneOperationCompleted(object arg) {
            if ((this.BackJumpSomeoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackJumpSomeoneCompleted(this, new BackJumpSomeoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Reass" +
            "ign", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Reassign(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("Reassign", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReassignAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.ReassignAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void ReassignAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.ReassignOperationCompleted == null)) {
                this.ReassignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReassignOperationCompleted);
            }
            this.InvokeAsync("Reassign", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.ReassignOperationCompleted, userState);
        }
        
        private void OnReassignOperationCompleted(object arg) {
            if ((this.ReassignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReassignCompleted(this, new ReassignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Retri" +
            "eve", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Retrieve(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            object[] results = this.Invoke("Retrieve", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo) {
            this.RetrieveAsync(vstrAPConnID, vstrWFSendInfo, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void RetrieveAsync(string vstrAPConnID, string vstrWFSendInfo, string vstrExtendDataInfo, object userState) {
            if ((this.RetrieveOperationCompleted == null)) {
                this.RetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveOperationCompleted);
            }
            this.InvokeAsync("Retrieve", new object[] {
                        vstrAPConnID,
                        vstrWFSendInfo,
                        vstrExtendDataInfo}, this.RetrieveOperationCompleted, userState);
        }
        
        private void OnRetrieveOperationCompleted(object arg) {
            if ((this.RetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCompleted(this, new RetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcD" +
            "efDelete", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcDefDelete(string vstrAPConnID, string vstrProcDefID, int vintProcVer, string vstrExtendDataInfo) {
            object[] results = this.Invoke("ProcDefDelete", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcDefDeleteAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer, string vstrExtendDataInfo) {
            this.ProcDefDeleteAsync(vstrAPConnID, vstrProcDefID, vintProcVer, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void ProcDefDeleteAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer, string vstrExtendDataInfo, object userState) {
            if ((this.ProcDefDeleteOperationCompleted == null)) {
                this.ProcDefDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcDefDeleteOperationCompleted);
            }
            this.InvokeAsync("ProcDefDelete", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer,
                        vstrExtendDataInfo}, this.ProcDefDeleteOperationCompleted, userState);
        }
        
        private void OnProcDefDeleteOperationCompleted(object arg) {
            if ((this.ProcDefDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcDefDeleteCompleted(this, new ProcDefDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Filin" +
            "g", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Filing(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProc, string vstrExtendDataInfo) {
            object[] results = this.Invoke("Filing", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vblnIncludeSubProc,
                        vstrExtendDataInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FilingAsync(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProc, string vstrExtendDataInfo) {
            this.FilingAsync(vstrAPConnID, vstrProcInstID, vblnIncludeSubProc, vstrExtendDataInfo, null);
        }
        
        /// <remarks/>
        public void FilingAsync(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProc, string vstrExtendDataInfo, object userState) {
            if ((this.FilingOperationCompleted == null)) {
                this.FilingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFilingOperationCompleted);
            }
            this.InvokeAsync("Filing", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vblnIncludeSubProc,
                        vstrExtendDataInfo}, this.FilingOperationCompleted, userState);
        }
        
        private void OnFilingOperationCompleted(object arg) {
            if ((this.FilingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FilingCompleted(this, new FilingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstStockCreate", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstStockCreate(string vstrAPConnID, string vstrProcDefID, int venuProcState) {
            object[] results = this.Invoke("ProcInstStockCreate", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        venuProcState});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstStockCreateAsync(string vstrAPConnID, string vstrProcDefID, int venuProcState) {
            this.ProcInstStockCreateAsync(vstrAPConnID, vstrProcDefID, venuProcState, null);
        }
        
        /// <remarks/>
        public void ProcInstStockCreateAsync(string vstrAPConnID, string vstrProcDefID, int venuProcState, object userState) {
            if ((this.ProcInstStockCreateOperationCompleted == null)) {
                this.ProcInstStockCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstStockCreateOperationCompleted);
            }
            this.InvokeAsync("ProcInstStockCreate", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        venuProcState}, this.ProcInstStockCreateOperationCompleted, userState);
        }
        
        private void OnProcInstStockCreateOperationCompleted(object arg) {
            if ((this.ProcInstStockCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstStockCreateCompleted(this, new ProcInstStockCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcD" +
            "efImportWithoutDelSotck", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ProcDefImportWithoutDelSotck(string vstrAPConnID, string vstrFileName) {
            object[] results = this.Invoke("ProcDefImportWithoutDelSotck", new object[] {
                        vstrAPConnID,
                        vstrFileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ProcDefImportWithoutDelSotckAsync(string vstrAPConnID, string vstrFileName) {
            this.ProcDefImportWithoutDelSotckAsync(vstrAPConnID, vstrFileName, null);
        }
        
        /// <remarks/>
        public void ProcDefImportWithoutDelSotckAsync(string vstrAPConnID, string vstrFileName, object userState) {
            if ((this.ProcDefImportWithoutDelSotckOperationCompleted == null)) {
                this.ProcDefImportWithoutDelSotckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcDefImportWithoutDelSotckOperationCompleted);
            }
            this.InvokeAsync("ProcDefImportWithoutDelSotck", new object[] {
                        vstrAPConnID,
                        vstrFileName}, this.ProcDefImportWithoutDelSotckOperationCompleted, userState);
        }
        
        private void OnProcDefImportWithoutDelSotckOperationCompleted(object arg) {
            if ((this.ProcDefImportWithoutDelSotckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcDefImportWithoutDelSotckCompleted(this, new ProcDefImportWithoutDelSotckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcD" +
            "efImport", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ProcDefImport(string vstrAPConnID, string vstrFileName) {
            object[] results = this.Invoke("ProcDefImport", new object[] {
                        vstrAPConnID,
                        vstrFileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ProcDefImportAsync(string vstrAPConnID, string vstrFileName) {
            this.ProcDefImportAsync(vstrAPConnID, vstrFileName, null);
        }
        
        /// <remarks/>
        public void ProcDefImportAsync(string vstrAPConnID, string vstrFileName, object userState) {
            if ((this.ProcDefImportOperationCompleted == null)) {
                this.ProcDefImportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcDefImportOperationCompleted);
            }
            this.InvokeAsync("ProcDefImport", new object[] {
                        vstrAPConnID,
                        vstrFileName}, this.ProcDefImportOperationCompleted, userState);
        }
        
        private void OnProcDefImportOperationCompleted(object arg) {
            if ((this.ProcDefImportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcDefImportCompleted(this, new ProcDefImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcD" +
            "efExport", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcDefExport(string vstrAPConnID, string vstrProcDefID, int vintProcVer, string vstrFileName) {
            object[] results = this.Invoke("ProcDefExport", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer,
                        vstrFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcDefExportAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer, string vstrFileName) {
            this.ProcDefExportAsync(vstrAPConnID, vstrProcDefID, vintProcVer, vstrFileName, null);
        }
        
        /// <remarks/>
        public void ProcDefExportAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer, string vstrFileName, object userState) {
            if ((this.ProcDefExportOperationCompleted == null)) {
                this.ProcDefExportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcDefExportOperationCompleted);
            }
            this.InvokeAsync("ProcDefExport", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer,
                        vstrFileName}, this.ProcDefExportOperationCompleted, userState);
        }
        
        private void OnProcDefExportOperationCompleted(object arg) {
            if ((this.ProcDefExportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcDefExportCompleted(this, new ProcDefExportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcD" +
            "efExist", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ProcDefExist(string vstrAPConnID, string vstrProcDefID, int vintProcVer) {
            object[] results = this.Invoke("ProcDefExist", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ProcDefExistAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer) {
            this.ProcDefExistAsync(vstrAPConnID, vstrProcDefID, vintProcVer, null);
        }
        
        /// <remarks/>
        public void ProcDefExistAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer, object userState) {
            if ((this.ProcDefExistOperationCompleted == null)) {
                this.ProcDefExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcDefExistOperationCompleted);
            }
            this.InvokeAsync("ProcDefExist", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer}, this.ProcDefExistOperationCompleted, userState);
        }
        
        private void OnProcDefExistOperationCompleted(object arg) {
            if ((this.ProcDefExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcDefExistCompleted(this, new ProcDefExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/GetUs" +
            "erInfoString", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserInfoString(string vstrAPConnID, string vstrCompID, string vstrUsrID) {
            object[] results = this.Invoke("GetUserInfoString", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoStringAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID) {
            this.GetUserInfoStringAsync(vstrAPConnID, vstrCompID, vstrUsrID, null);
        }
        
        /// <remarks/>
        public void GetUserInfoStringAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, object userState) {
            if ((this.GetUserInfoStringOperationCompleted == null)) {
                this.GetUserInfoStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoStringOperationCompleted);
            }
            this.InvokeAsync("GetUserInfoString", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID}, this.GetUserInfoStringOperationCompleted, userState);
        }
        
        private void OnGetUserInfoStringOperationCompleted(object arg) {
            if ((this.GetUserInfoStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoStringCompleted(this, new GetUserInfoStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Workl" +
            "ist", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Worklist(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent) {
            object[] results = this.Invoke("Worklist", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID,
                        vblnIncludeAgent,
                        vblnDeepAgent});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WorklistAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent) {
            this.WorklistAsync(vstrAPConnID, vstrCompID, vstrUsrID, vblnIncludeAgent, vblnDeepAgent, null);
        }
        
        /// <remarks/>
        public void WorklistAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, object userState) {
            if ((this.WorklistOperationCompleted == null)) {
                this.WorklistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorklistOperationCompleted);
            }
            this.InvokeAsync("Worklist", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID,
                        vblnIncludeAgent,
                        vblnDeepAgent}, this.WorklistOperationCompleted, userState);
        }
        
        private void OnWorklistOperationCompleted(object arg) {
            if ((this.WorklistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WorklistCompleted(this, new WorklistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Workl" +
            "istOrderByColumns", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WorklistOrderByColumns(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, string vstrOrderByColumns) {
            object[] results = this.Invoke("WorklistOrderByColumns", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID,
                        vblnIncludeAgent,
                        vblnDeepAgent,
                        vstrOrderByColumns});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WorklistOrderByColumnsAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, string vstrOrderByColumns) {
            this.WorklistOrderByColumnsAsync(vstrAPConnID, vstrCompID, vstrUsrID, vblnIncludeAgent, vblnDeepAgent, vstrOrderByColumns, null);
        }
        
        /// <remarks/>
        public void WorklistOrderByColumnsAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, string vstrOrderByColumns, object userState) {
            if ((this.WorklistOrderByColumnsOperationCompleted == null)) {
                this.WorklistOrderByColumnsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorklistOrderByColumnsOperationCompleted);
            }
            this.InvokeAsync("WorklistOrderByColumns", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID,
                        vblnIncludeAgent,
                        vblnDeepAgent,
                        vstrOrderByColumns}, this.WorklistOrderByColumnsOperationCompleted, userState);
        }
        
        private void OnWorklistOrderByColumnsOperationCompleted(object arg) {
            if ((this.WorklistOrderByColumnsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WorklistOrderByColumnsCompleted(this, new WorklistOrderByColumnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Workl" +
            "istByDate", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WorklistByDate(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, System.DateTime vdtmProSDate, System.DateTime vdtmProEDate) {
            object[] results = this.Invoke("WorklistByDate", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID,
                        vblnIncludeAgent,
                        vblnDeepAgent,
                        vdtmProSDate,
                        vdtmProEDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WorklistByDateAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, System.DateTime vdtmProSDate, System.DateTime vdtmProEDate) {
            this.WorklistByDateAsync(vstrAPConnID, vstrCompID, vstrUsrID, vblnIncludeAgent, vblnDeepAgent, vdtmProSDate, vdtmProEDate, null);
        }
        
        /// <remarks/>
        public void WorklistByDateAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, System.DateTime vdtmProSDate, System.DateTime vdtmProEDate, object userState) {
            if ((this.WorklistByDateOperationCompleted == null)) {
                this.WorklistByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorklistByDateOperationCompleted);
            }
            this.InvokeAsync("WorklistByDate", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID,
                        vblnIncludeAgent,
                        vblnDeepAgent,
                        vdtmProSDate,
                        vdtmProEDate}, this.WorklistByDateOperationCompleted, userState);
        }
        
        private void OnWorklistByDateOperationCompleted(object arg) {
            if ((this.WorklistByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WorklistByDateCompleted(this, new WorklistByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Workl" +
            "istByDateOrderByColumns", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WorklistByDateOrderByColumns(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, System.DateTime vdtmProSDate, System.DateTime vdtmProEDate, string vstrOrderByColumns) {
            object[] results = this.Invoke("WorklistByDateOrderByColumns", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID,
                        vblnIncludeAgent,
                        vblnDeepAgent,
                        vdtmProSDate,
                        vdtmProEDate,
                        vstrOrderByColumns});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WorklistByDateOrderByColumnsAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, System.DateTime vdtmProSDate, System.DateTime vdtmProEDate, string vstrOrderByColumns) {
            this.WorklistByDateOrderByColumnsAsync(vstrAPConnID, vstrCompID, vstrUsrID, vblnIncludeAgent, vblnDeepAgent, vdtmProSDate, vdtmProEDate, vstrOrderByColumns, null);
        }
        
        /// <remarks/>
        public void WorklistByDateOrderByColumnsAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, bool vblnIncludeAgent, bool vblnDeepAgent, System.DateTime vdtmProSDate, System.DateTime vdtmProEDate, string vstrOrderByColumns, object userState) {
            if ((this.WorklistByDateOrderByColumnsOperationCompleted == null)) {
                this.WorklistByDateOrderByColumnsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorklistByDateOrderByColumnsOperationCompleted);
            }
            this.InvokeAsync("WorklistByDateOrderByColumns", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID,
                        vblnIncludeAgent,
                        vblnDeepAgent,
                        vdtmProSDate,
                        vdtmProEDate,
                        vstrOrderByColumns}, this.WorklistByDateOrderByColumnsOperationCompleted, userState);
        }
        
        private void OnWorklistByDateOrderByColumnsOperationCompleted(object arg) {
            if ((this.WorklistByDateOrderByColumnsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WorklistByDateOrderByColumnsCompleted(this, new WorklistByDateOrderByColumnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcD" +
            "efList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcDefList(string vstrAPConnID) {
            object[] results = this.Invoke("ProcDefList", new object[] {
                        vstrAPConnID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcDefListAsync(string vstrAPConnID) {
            this.ProcDefListAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void ProcDefListAsync(string vstrAPConnID, object userState) {
            if ((this.ProcDefListOperationCompleted == null)) {
                this.ProcDefListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcDefListOperationCompleted);
            }
            this.InvokeAsync("ProcDefList", new object[] {
                        vstrAPConnID}, this.ProcDefListOperationCompleted, userState);
        }
        
        private void OnProcDefListOperationCompleted(object arg) {
            if ((this.ProcDefListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcDefListCompleted(this, new ProcDefListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstList(object vstrAPConnID) {
            object[] results = this.Invoke("ProcInstList", new object[] {
                        vstrAPConnID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstListAsync(object vstrAPConnID) {
            this.ProcInstListAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void ProcInstListAsync(object vstrAPConnID, object userState) {
            if ((this.ProcInstListOperationCompleted == null)) {
                this.ProcInstListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstListOperationCompleted);
            }
            this.InvokeAsync("ProcInstList", new object[] {
                        vstrAPConnID}, this.ProcInstListOperationCompleted, userState);
        }
        
        private void OnProcInstListOperationCompleted(object arg) {
            if ((this.ProcInstListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstListCompleted(this, new ProcInstListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcV" +
            "arList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcVarList(string vstrAPConnID, string vstrProcDefID, int vintProcVer) {
            object[] results = this.Invoke("ProcVarList", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcVarListAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer) {
            this.ProcVarListAsync(vstrAPConnID, vstrProcDefID, vintProcVer, null);
        }
        
        /// <remarks/>
        public void ProcVarListAsync(string vstrAPConnID, string vstrProcDefID, int vintProcVer, object userState) {
            if ((this.ProcVarListOperationCompleted == null)) {
                this.ProcVarListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcVarListOperationCompleted);
            }
            this.InvokeAsync("ProcVarList", new object[] {
                        vstrAPConnID,
                        vstrProcDefID,
                        vintProcVer}, this.ProcVarListOperationCompleted, userState);
        }
        
        private void OnProcVarListOperationCompleted(object arg) {
            if ((this.ProcVarListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcVarListCompleted(this, new ProcVarListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcV" +
            "arInstList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcVarInstList(string vstrAPConnID, string vstrProcInstID) {
            object[] results = this.Invoke("ProcVarInstList", new object[] {
                        vstrAPConnID,
                        vstrProcInstID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcVarInstListAsync(string vstrAPConnID, string vstrProcInstID) {
            this.ProcVarInstListAsync(vstrAPConnID, vstrProcInstID, null);
        }
        
        /// <remarks/>
        public void ProcVarInstListAsync(string vstrAPConnID, string vstrProcInstID, object userState) {
            if ((this.ProcVarInstListOperationCompleted == null)) {
                this.ProcVarInstListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcVarInstListOperationCompleted);
            }
            this.InvokeAsync("ProcVarInstList", new object[] {
                        vstrAPConnID,
                        vstrProcInstID}, this.ProcVarInstListOperationCompleted, userState);
        }
        
        private void OnProcVarInstListOperationCompleted(object arg) {
            if ((this.ProcVarInstListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcVarInstListCompleted(this, new ProcVarInstListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/SubPr" +
            "ocVarList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubProcVarList(string vstrAPConnID, string vstrSubProcDefID, enuProcState venuSubProcState) {
            object[] results = this.Invoke("SubProcVarList", new object[] {
                        vstrAPConnID,
                        vstrSubProcDefID,
                        venuSubProcState});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubProcVarListAsync(string vstrAPConnID, string vstrSubProcDefID, enuProcState venuSubProcState) {
            this.SubProcVarListAsync(vstrAPConnID, vstrSubProcDefID, venuSubProcState, null);
        }
        
        /// <remarks/>
        public void SubProcVarListAsync(string vstrAPConnID, string vstrSubProcDefID, enuProcState venuSubProcState, object userState) {
            if ((this.SubProcVarListOperationCompleted == null)) {
                this.SubProcVarListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubProcVarListOperationCompleted);
            }
            this.InvokeAsync("SubProcVarList", new object[] {
                        vstrAPConnID,
                        vstrSubProcDefID,
                        venuSubProcState}, this.SubProcVarListOperationCompleted, userState);
        }
        
        private void OnSubProcVarListOperationCompleted(object arg) {
            if ((this.SubProcVarListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubProcVarListCompleted(this, new SubProcVarListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Instr" +
            "uctList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InstructList(string vstrAPConnID, string vstrProcInstID) {
            object[] results = this.Invoke("InstructList", new object[] {
                        vstrAPConnID,
                        vstrProcInstID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InstructListAsync(string vstrAPConnID, string vstrProcInstID) {
            this.InstructListAsync(vstrAPConnID, vstrProcInstID, null);
        }
        
        /// <remarks/>
        public void InstructListAsync(string vstrAPConnID, string vstrProcInstID, object userState) {
            if ((this.InstructListOperationCompleted == null)) {
                this.InstructListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstructListOperationCompleted);
            }
            this.InvokeAsync("InstructList", new object[] {
                        vstrAPConnID,
                        vstrProcInstID}, this.InstructListOperationCompleted, userState);
        }
        
        private void OnInstructListOperationCompleted(object arg) {
            if ((this.InstructListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstructListCompleted(this, new InstructListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/DelOv" +
            "erdueStock", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DelOverdueStock(string vstrAPConnID) {
            object[] results = this.Invoke("DelOverdueStock", new object[] {
                        vstrAPConnID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DelOverdueStockAsync(string vstrAPConnID) {
            this.DelOverdueStockAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void DelOverdueStockAsync(string vstrAPConnID, object userState) {
            if ((this.DelOverdueStockOperationCompleted == null)) {
                this.DelOverdueStockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelOverdueStockOperationCompleted);
            }
            this.InvokeAsync("DelOverdueStock", new object[] {
                        vstrAPConnID}, this.DelOverdueStockOperationCompleted, userState);
        }
        
        private void OnDelOverdueStockOperationCompleted(object arg) {
            if ((this.DelOverdueStockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelOverdueStockCompleted(this, new DelOverdueStockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ProcI" +
            "nstDelete", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcInstDelete(string vstrAPConnID, string vstrProcInstID, enuFlgPeriod venuFlgPeriod) {
            object[] results = this.Invoke("ProcInstDelete", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        venuFlgPeriod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcInstDeleteAsync(string vstrAPConnID, string vstrProcInstID, enuFlgPeriod venuFlgPeriod) {
            this.ProcInstDeleteAsync(vstrAPConnID, vstrProcInstID, venuFlgPeriod, null);
        }
        
        /// <remarks/>
        public void ProcInstDeleteAsync(string vstrAPConnID, string vstrProcInstID, enuFlgPeriod venuFlgPeriod, object userState) {
            if ((this.ProcInstDeleteOperationCompleted == null)) {
                this.ProcInstDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcInstDeleteOperationCompleted);
            }
            this.InvokeAsync("ProcInstDelete", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        venuFlgPeriod}, this.ProcInstDeleteOperationCompleted, userState);
        }
        
        private void OnProcInstDeleteOperationCompleted(object arg) {
            if ((this.ProcInstDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcInstDeleteCompleted(this, new ProcInstDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/UserI" +
            "DList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserIDList(string vstrAPConnID) {
            object[] results = this.Invoke("UserIDList", new object[] {
                        vstrAPConnID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserIDListAsync(string vstrAPConnID) {
            this.UserIDListAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void UserIDListAsync(string vstrAPConnID, object userState) {
            if ((this.UserIDListOperationCompleted == null)) {
                this.UserIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserIDListOperationCompleted);
            }
            this.InvokeAsync("UserIDList", new object[] {
                        vstrAPConnID}, this.UserIDListOperationCompleted, userState);
        }
        
        private void OnUserIDListOperationCompleted(object arg) {
            if ((this.UserIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserIDListCompleted(this, new UserIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/OUIDL" +
            "ist", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OUIDList(string vstrAPConnID, string vstrOuDomainID, string vstrOuCompID) {
            object[] results = this.Invoke("OUIDList", new object[] {
                        vstrAPConnID,
                        vstrOuDomainID,
                        vstrOuCompID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OUIDListAsync(string vstrAPConnID, string vstrOuDomainID, string vstrOuCompID) {
            this.OUIDListAsync(vstrAPConnID, vstrOuDomainID, vstrOuCompID, null);
        }
        
        /// <remarks/>
        public void OUIDListAsync(string vstrAPConnID, string vstrOuDomainID, string vstrOuCompID, object userState) {
            if ((this.OUIDListOperationCompleted == null)) {
                this.OUIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOUIDListOperationCompleted);
            }
            this.InvokeAsync("OUIDList", new object[] {
                        vstrAPConnID,
                        vstrOuDomainID,
                        vstrOuCompID}, this.OUIDListOperationCompleted, userState);
        }
        
        private void OnOUIDListOperationCompleted(object arg) {
            if ((this.OUIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OUIDListCompleted(this, new OUIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/RoleI" +
            "DList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RoleIDList(string vstrAPConnID, string vstrRoleDomainID, string vstrRoleCompID) {
            object[] results = this.Invoke("RoleIDList", new object[] {
                        vstrAPConnID,
                        vstrRoleDomainID,
                        vstrRoleCompID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RoleIDListAsync(string vstrAPConnID, string vstrRoleDomainID, string vstrRoleCompID) {
            this.RoleIDListAsync(vstrAPConnID, vstrRoleDomainID, vstrRoleCompID, null);
        }
        
        /// <remarks/>
        public void RoleIDListAsync(string vstrAPConnID, string vstrRoleDomainID, string vstrRoleCompID, object userState) {
            if ((this.RoleIDListOperationCompleted == null)) {
                this.RoleIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRoleIDListOperationCompleted);
            }
            this.InvokeAsync("RoleIDList", new object[] {
                        vstrAPConnID,
                        vstrRoleDomainID,
                        vstrRoleCompID}, this.RoleIDListOperationCompleted, userState);
        }
        
        private void OnRoleIDListOperationCompleted(object arg) {
            if ((this.RoleIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RoleIDListCompleted(this, new RoleIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Group" +
            "IDList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GroupIDList(string vstrAPConnID, string vstrGrpDomainID, string vstrGrpCompID) {
            object[] results = this.Invoke("GroupIDList", new object[] {
                        vstrAPConnID,
                        vstrGrpDomainID,
                        vstrGrpCompID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GroupIDListAsync(string vstrAPConnID, string vstrGrpDomainID, string vstrGrpCompID) {
            this.GroupIDListAsync(vstrAPConnID, vstrGrpDomainID, vstrGrpCompID, null);
        }
        
        /// <remarks/>
        public void GroupIDListAsync(string vstrAPConnID, string vstrGrpDomainID, string vstrGrpCompID, object userState) {
            if ((this.GroupIDListOperationCompleted == null)) {
                this.GroupIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGroupIDListOperationCompleted);
            }
            this.InvokeAsync("GroupIDList", new object[] {
                        vstrAPConnID,
                        vstrGrpDomainID,
                        vstrGrpCompID}, this.GroupIDListOperationCompleted, userState);
        }
        
        private void OnGroupIDListOperationCompleted(object arg) {
            if ((this.GroupIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GroupIDListCompleted(this, new GroupIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/OuUse" +
            "rIDList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OuUserIDList(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrOuID) {
            object[] results = this.Invoke("OuUserIDList", new object[] {
                        vstrAPConnID,
                        vstrDomainID,
                        vstrCompID,
                        vstrOuID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OuUserIDListAsync(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrOuID) {
            this.OuUserIDListAsync(vstrAPConnID, vstrDomainID, vstrCompID, vstrOuID, null);
        }
        
        /// <remarks/>
        public void OuUserIDListAsync(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrOuID, object userState) {
            if ((this.OuUserIDListOperationCompleted == null)) {
                this.OuUserIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOuUserIDListOperationCompleted);
            }
            this.InvokeAsync("OuUserIDList", new object[] {
                        vstrAPConnID,
                        vstrDomainID,
                        vstrCompID,
                        vstrOuID}, this.OuUserIDListOperationCompleted, userState);
        }
        
        private void OnOuUserIDListOperationCompleted(object arg) {
            if ((this.OuUserIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OuUserIDListCompleted(this, new OuUserIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Recur" +
            "siveUserIDList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RecursiveUserIDList(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrOuID) {
            object[] results = this.Invoke("RecursiveUserIDList", new object[] {
                        vstrAPConnID,
                        vstrDomainID,
                        vstrCompID,
                        vstrOuID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RecursiveUserIDListAsync(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrOuID) {
            this.RecursiveUserIDListAsync(vstrAPConnID, vstrDomainID, vstrCompID, vstrOuID, null);
        }
        
        /// <remarks/>
        public void RecursiveUserIDListAsync(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrOuID, object userState) {
            if ((this.RecursiveUserIDListOperationCompleted == null)) {
                this.RecursiveUserIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecursiveUserIDListOperationCompleted);
            }
            this.InvokeAsync("RecursiveUserIDList", new object[] {
                        vstrAPConnID,
                        vstrDomainID,
                        vstrCompID,
                        vstrOuID}, this.RecursiveUserIDListOperationCompleted, userState);
        }
        
        private void OnRecursiveUserIDListOperationCompleted(object arg) {
            if ((this.RecursiveUserIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecursiveUserIDListCompleted(this, new RecursiveUserIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/GetUs" +
            "erSchema", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserSchema(string vstrAPConnID) {
            object[] results = this.Invoke("GetUserSchema", new object[] {
                        vstrAPConnID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserSchemaAsync(string vstrAPConnID) {
            this.GetUserSchemaAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void GetUserSchemaAsync(string vstrAPConnID, object userState) {
            if ((this.GetUserSchemaOperationCompleted == null)) {
                this.GetUserSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserSchemaOperationCompleted);
            }
            this.InvokeAsync("GetUserSchema", new object[] {
                        vstrAPConnID}, this.GetUserSchemaOperationCompleted, userState);
        }
        
        private void OnGetUserSchemaOperationCompleted(object arg) {
            if ((this.GetUserSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserSchemaCompleted(this, new GetUserSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/OuRol" +
            "eIDList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OuRoleIDList(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrOuID) {
            object[] results = this.Invoke("OuRoleIDList", new object[] {
                        vstrAPConnID,
                        vstrDomainID,
                        vstrCompID,
                        vstrOuID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OuRoleIDListAsync(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrOuID) {
            this.OuRoleIDListAsync(vstrAPConnID, vstrDomainID, vstrCompID, vstrOuID, null);
        }
        
        /// <remarks/>
        public void OuRoleIDListAsync(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrOuID, object userState) {
            if ((this.OuRoleIDListOperationCompleted == null)) {
                this.OuRoleIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOuRoleIDListOperationCompleted);
            }
            this.InvokeAsync("OuRoleIDList", new object[] {
                        vstrAPConnID,
                        vstrDomainID,
                        vstrCompID,
                        vstrOuID}, this.OuRoleIDListOperationCompleted, userState);
        }
        
        private void OnOuRoleIDListOperationCompleted(object arg) {
            if ((this.OuRoleIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OuRoleIDListCompleted(this, new OuRoleIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Group" +
            "UserIDList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GroupUserIDList(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrGroupID) {
            object[] results = this.Invoke("GroupUserIDList", new object[] {
                        vstrAPConnID,
                        vstrDomainID,
                        vstrCompID,
                        vstrGroupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GroupUserIDListAsync(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrGroupID) {
            this.GroupUserIDListAsync(vstrAPConnID, vstrDomainID, vstrCompID, vstrGroupID, null);
        }
        
        /// <remarks/>
        public void GroupUserIDListAsync(string vstrAPConnID, string vstrDomainID, string vstrCompID, string vstrGroupID, object userState) {
            if ((this.GroupUserIDListOperationCompleted == null)) {
                this.GroupUserIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGroupUserIDListOperationCompleted);
            }
            this.InvokeAsync("GroupUserIDList", new object[] {
                        vstrAPConnID,
                        vstrDomainID,
                        vstrCompID,
                        vstrGroupID}, this.GroupUserIDListOperationCompleted, userState);
        }
        
        private void OnGroupUserIDListOperationCompleted(object arg) {
            if ((this.GroupUserIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GroupUserIDListCompleted(this, new GroupUserIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/UserI" +
            "DLikeList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserIDLikeList(string vstrAPConnID, string vstrUserID) {
            object[] results = this.Invoke("UserIDLikeList", new object[] {
                        vstrAPConnID,
                        vstrUserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserIDLikeListAsync(string vstrAPConnID, string vstrUserID) {
            this.UserIDLikeListAsync(vstrAPConnID, vstrUserID, null);
        }
        
        /// <remarks/>
        public void UserIDLikeListAsync(string vstrAPConnID, string vstrUserID, object userState) {
            if ((this.UserIDLikeListOperationCompleted == null)) {
                this.UserIDLikeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserIDLikeListOperationCompleted);
            }
            this.InvokeAsync("UserIDLikeList", new object[] {
                        vstrAPConnID,
                        vstrUserID}, this.UserIDLikeListOperationCompleted, userState);
        }
        
        private void OnUserIDLikeListOperationCompleted(object arg) {
            if ((this.UserIDLikeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserIDLikeListCompleted(this, new UserIDLikeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Newes" +
            "tProcDefList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewestProcDefList(string vstrAPConnID) {
            object[] results = this.Invoke("NewestProcDefList", new object[] {
                        vstrAPConnID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewestProcDefListAsync(string vstrAPConnID) {
            this.NewestProcDefListAsync(vstrAPConnID, null);
        }
        
        /// <remarks/>
        public void NewestProcDefListAsync(string vstrAPConnID, object userState) {
            if ((this.NewestProcDefListOperationCompleted == null)) {
                this.NewestProcDefListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewestProcDefListOperationCompleted);
            }
            this.InvokeAsync("NewestProcDefList", new object[] {
                        vstrAPConnID}, this.NewestProcDefListOperationCompleted, userState);
        }
        
        private void OnNewestProcDefListOperationCompleted(object arg) {
            if ((this.NewestProcDefListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewestProcDefListCompleted(this, new NewestProcDefListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/ManWK" +
            "ItemTrack", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ManWKItemTrack(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProcInst) {
            object[] results = this.Invoke("ManWKItemTrack", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vblnIncludeSubProcInst});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ManWKItemTrackAsync(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProcInst) {
            this.ManWKItemTrackAsync(vstrAPConnID, vstrProcInstID, vblnIncludeSubProcInst, null);
        }
        
        /// <remarks/>
        public void ManWKItemTrackAsync(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProcInst, object userState) {
            if ((this.ManWKItemTrackOperationCompleted == null)) {
                this.ManWKItemTrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManWKItemTrackOperationCompleted);
            }
            this.InvokeAsync("ManWKItemTrack", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vblnIncludeSubProcInst}, this.ManWKItemTrackOperationCompleted, userState);
        }
        
        private void OnManWKItemTrackOperationCompleted(object arg) {
            if ((this.ManWKItemTrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManWKItemTrackCompleted(this, new ManWKItemTrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/WKIte" +
            "mTrack", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WKItemTrack(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProcInst) {
            object[] results = this.Invoke("WKItemTrack", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vblnIncludeSubProcInst});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WKItemTrackAsync(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProcInst) {
            this.WKItemTrackAsync(vstrAPConnID, vstrProcInstID, vblnIncludeSubProcInst, null);
        }
        
        /// <remarks/>
        public void WKItemTrackAsync(string vstrAPConnID, string vstrProcInstID, bool vblnIncludeSubProcInst, object userState) {
            if ((this.WKItemTrackOperationCompleted == null)) {
                this.WKItemTrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWKItemTrackOperationCompleted);
            }
            this.InvokeAsync("WKItemTrack", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        vblnIncludeSubProcInst}, this.WKItemTrackOperationCompleted, userState);
        }
        
        private void OnWKItemTrackOperationCompleted(object arg) {
            if ((this.WKItemTrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WKItemTrackCompleted(this, new WKItemTrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/WKIte" +
            "mTrackByWKItemID", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WKItemTrackByWKItemID(string vstrAPConnID, string vstrWKItemID, bool vblnIncludeSubProcInst) {
            object[] results = this.Invoke("WKItemTrackByWKItemID", new object[] {
                        vstrAPConnID,
                        vstrWKItemID,
                        vblnIncludeSubProcInst});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WKItemTrackByWKItemIDAsync(string vstrAPConnID, string vstrWKItemID, bool vblnIncludeSubProcInst) {
            this.WKItemTrackByWKItemIDAsync(vstrAPConnID, vstrWKItemID, vblnIncludeSubProcInst, null);
        }
        
        /// <remarks/>
        public void WKItemTrackByWKItemIDAsync(string vstrAPConnID, string vstrWKItemID, bool vblnIncludeSubProcInst, object userState) {
            if ((this.WKItemTrackByWKItemIDOperationCompleted == null)) {
                this.WKItemTrackByWKItemIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWKItemTrackByWKItemIDOperationCompleted);
            }
            this.InvokeAsync("WKItemTrackByWKItemID", new object[] {
                        vstrAPConnID,
                        vstrWKItemID,
                        vblnIncludeSubProcInst}, this.WKItemTrackByWKItemIDOperationCompleted, userState);
        }
        
        private void OnWKItemTrackByWKItemIDOperationCompleted(object arg) {
            if ((this.WKItemTrackByWKItemIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WKItemTrackByWKItemIDCompleted(this, new WKItemTrackByWKItemIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/WKIte" +
            "mTrackByWKItemKind", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WKItemTrackByWKItemKind(string vstrAPConnID, string vstrProcInstID, enuActKind venuWKItemKind, bool vblnIncludeSubProcInst) {
            object[] results = this.Invoke("WKItemTrackByWKItemKind", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        venuWKItemKind,
                        vblnIncludeSubProcInst});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WKItemTrackByWKItemKindAsync(string vstrAPConnID, string vstrProcInstID, enuActKind venuWKItemKind, bool vblnIncludeSubProcInst) {
            this.WKItemTrackByWKItemKindAsync(vstrAPConnID, vstrProcInstID, venuWKItemKind, vblnIncludeSubProcInst, null);
        }
        
        /// <remarks/>
        public void WKItemTrackByWKItemKindAsync(string vstrAPConnID, string vstrProcInstID, enuActKind venuWKItemKind, bool vblnIncludeSubProcInst, object userState) {
            if ((this.WKItemTrackByWKItemKindOperationCompleted == null)) {
                this.WKItemTrackByWKItemKindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWKItemTrackByWKItemKindOperationCompleted);
            }
            this.InvokeAsync("WKItemTrackByWKItemKind", new object[] {
                        vstrAPConnID,
                        vstrProcInstID,
                        venuWKItemKind,
                        vblnIncludeSubProcInst}, this.WKItemTrackByWKItemKindOperationCompleted, userState);
        }
        
        private void OnWKItemTrackByWKItemKindOperationCompleted(object arg) {
            if ((this.WKItemTrackByWKItemKindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WKItemTrackByWKItemKindCompleted(this, new WKItemTrackByWKItemKindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices/Retri" +
            "evalbeWKItemList", RequestNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", ResponseNamespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrievalbeWKItemList(string vstrAPConnID, string vstrCompID, string vstrUsrID) {
            object[] results = this.Invoke("RetrievalbeWKItemList", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrievalbeWKItemListAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID) {
            this.RetrievalbeWKItemListAsync(vstrAPConnID, vstrCompID, vstrUsrID, null);
        }
        
        /// <remarks/>
        public void RetrievalbeWKItemListAsync(string vstrAPConnID, string vstrCompID, string vstrUsrID, object userState) {
            if ((this.RetrievalbeWKItemListOperationCompleted == null)) {
                this.RetrievalbeWKItemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievalbeWKItemListOperationCompleted);
            }
            this.InvokeAsync("RetrievalbeWKItemList", new object[] {
                        vstrAPConnID,
                        vstrCompID,
                        vstrUsrID}, this.RetrievalbeWKItemListOperationCompleted, userState);
        }
        
        private void OnRetrievalbeWKItemListOperationCompleted(object arg) {
            if ((this.RetrievalbeWKItemListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievalbeWKItemListCompleted(this, new RetrievalbeWKItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices")]
    public enum enuMailState {
        
        /// <remarks/>
        wfActive,
        
        /// <remarks/>
        wfComplete,
        
        /// <remarks/>
        wfDisable,
        
        /// <remarks/>
        wfAbort,
        
        /// <remarks/>
        wfSuspend,
        
        /// <remarks/>
        wfRetry,
        
        /// <remarks/>
        wfEmpty,
        
        /// <remarks/>
        wfInActive,
        
        /// <remarks/>
        wfError,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices")]
    public enum enuFlgPeriod {
        
        /// <remarks/>
        wfDefinition,
        
        /// <remarks/>
        wfInstance,
        
        /// <remarks/>
        wfHistory,
        
        /// <remarks/>
        wfInstanceAndHistory,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices")]
    public enum enuFlgRouteType {
        
        /// <remarks/>
        wfSequential,
        
        /// <remarks/>
        wfSplit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices")]
    public enum enuActKind {
        
        /// <remarks/>
        wfBeginAct,
        
        /// <remarks/>
        wfEndAct,
        
        /// <remarks/>
        wfManAct,
        
        /// <remarks/>
        wfAutoAct,
        
        /// <remarks/>
        wfSubProcAct,
        
        /// <remarks/>
        wfControlAct,
        
        /// <remarks/>
        wfMailAct,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices")]
    public enum enuFlgWorkingTime {
        
        /// <remarks/>
        wfAll_Time,
        
        /// <remarks/>
        wfExcludeWeekend,
        
        /// <remarks/>
        wfShift,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/GSS.Stirrup.Workflow20.OperationServices/OperationServices")]
    public enum enuProcState {
        
        /// <remarks/>
        wfInDevelop,
        
        /// <remarks/>
        wfTest,
        
        /// <remarks/>
        wfUnPublished,
        
        /// <remarks/>
        wfPublished,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcessVaribleChangeCompletedEventHandler(object sender, ProcessVaribleChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessVaribleChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessVaribleChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void MailItemInINSTStateChangeCompletedEventHandler(object sender, MailItemInINSTStateChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailItemInINSTStateChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailItemInINSTStateChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ActPtcpChangeCompletedEventHandler(object sender, ActPtcpChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActPtcpChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActPtcpChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetActPtcpInstCompletedEventHandler(object sender, GetActPtcpInstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActPtcpInstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActPtcpInstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void MailItemInINSTChangeCompletedEventHandler(object sender, MailItemInINSTChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailItemInINSTChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailItemInINSTChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcVarInstListByWKItemIDCompletedEventHandler(object sender, ProcVarInstListByWKItemIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcVarInstListByWKItemIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcVarInstListByWKItemIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WKItemPtcpInstChangeCompletedEventHandler(object sender, WKItemPtcpInstChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WKItemPtcpInstChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WKItemPtcpInstChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SysVarListCompletedEventHandler(object sender, SysVarListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SysVarListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SysVarListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckWKItemPtcpUsrCompletedEventHandler(object sender, CheckWKItemPtcpUsrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckWKItemPtcpUsrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckWKItemPtcpUsrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetNextManActPtcpPreViewCompletedEventHandler(object sender, GetNextManActPtcpPreViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextManActPtcpPreViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextManActPtcpPreViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ManWKItemReActiveCompletedEventHandler(object sender, ManWKItemReActiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManWKItemReActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ManWKItemReActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackwardLastProWithoutRecordCompletedEventHandler(object sender, BackwardLastProWithoutRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackwardLastProWithoutRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackwardLastProWithoutRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void VerifyMailItemCompletedEventHandler(object sender, VerifyMailItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyMailItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyMailItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void VerifyWKItemPtcpCompletedEventHandler(object sender, VerifyWKItemPtcpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyWKItemPtcpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyWKItemPtcpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UserRolChkCompletedEventHandler(object sender, UserRolChkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserRolChkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserRolChkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UserOUIDCompletedEventHandler(object sender, UserOUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserOUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserOUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SCLoadUserCompletedEventHandler(object sender, SCLoadUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCLoadUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCLoadUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SCLoginCheckCompletedEventHandler(object sender, SCLoginCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCLoginCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCLoginCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstListByProsecutorCompletedEventHandler(object sender, ProcInstListByProsecutorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstListByProsecutorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstListByProsecutorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstListByProposerAndProcStateCompletedEventHandler(object sender, ProcInstListByProposerAndProcStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstListByProposerAndProcStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstListByProposerAndProcStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstListByProposerCompletedEventHandler(object sender, ProcInstListByProposerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstListByProposerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstListByProposerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstListByProcStateCompletedEventHandler(object sender, ProcInstListByProcStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstListByProcStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstListByProcStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstListByDateCompletedEventHandler(object sender, ProcInstListByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstListByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstListByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ManActInstAddNextCompletedEventHandler(object sender, ManActInstAddNextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManActInstAddNextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ManActInstAddNextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcStockDelCompletedEventHandler(object sender, ProcStockDelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcStockDelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcStockDelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void MailItemDeleteCompletedEventHandler(object sender, MailItemDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailItemDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailItemDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SequenceDeleteCompletedEventHandler(object sender, SequenceDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SequenceDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SequenceDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UndoFilingCompletedEventHandler(object sender, UndoFilingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UndoFilingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UndoFilingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstExportCompletedEventHandler(object sender, ProcInstExportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstExportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstExportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstDelCompletedEventHandler(object sender, ProcInstDelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstDelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstDelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstImportCompletedEventHandler(object sender, ProcInstImportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstListByProcDefIDCompletedEventHandler(object sender, ProcInstListByProcDefIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstListByProcDefIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstListByProcDefIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ForJumpActListCompletedEventHandler(object sender, ForJumpActListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForJumpActListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForJumpActListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackJumpActListCompletedEventHandler(object sender, BackJumpActListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackJumpActListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackJumpActListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstDelayListCompletedEventHandler(object sender, ProcInstDelayListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstDelayListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstDelayListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void StartCompletedEventHandler(object sender, StartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstSuspendCompletedEventHandler(object sender, ProcInstSuspendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstSuspendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstSuspendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstResumeCompletedEventHandler(object sender, ProcInstResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstAbortCompletedEventHandler(object sender, ProcInstAbortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstAbortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstAbortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ForwardCompletedEventHandler(object sender, ForwardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForwardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForwardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackwardLastPtcpCompletedEventHandler(object sender, BackwardLastPtcpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackwardLastPtcpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackwardLastPtcpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackwardLastProCompletedEventHandler(object sender, BackwardLastProCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackwardLastProCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackwardLastProCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackwardWKItemPtcpCompletedEventHandler(object sender, BackwardWKItemPtcpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackwardWKItemPtcpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackwardWKItemPtcpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackwardSomeoneCompletedEventHandler(object sender, BackwardSomeoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackwardSomeoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackwardSomeoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ForJumpCompletedEventHandler(object sender, ForJumpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForJumpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForJumpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ForJumpSomeoneCompletedEventHandler(object sender, ForJumpSomeoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForJumpSomeoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForJumpSomeoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackJumpLastPtcpCompletedEventHandler(object sender, BackJumpLastPtcpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackJumpLastPtcpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackJumpLastPtcpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackJumpLastProCompletedEventHandler(object sender, BackJumpLastProCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackJumpLastProCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackJumpLastProCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackJumpWKItemPtcpCompletedEventHandler(object sender, BackJumpWKItemPtcpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackJumpWKItemPtcpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackJumpWKItemPtcpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackJumpWKItemProCompletedEventHandler(object sender, BackJumpWKItemProCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackJumpWKItemProCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackJumpWKItemProCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackJumpSomeoneCompletedEventHandler(object sender, BackJumpSomeoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackJumpSomeoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackJumpSomeoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReassignCompletedEventHandler(object sender, ReassignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReassignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReassignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RetrieveCompletedEventHandler(object sender, RetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcDefDeleteCompletedEventHandler(object sender, ProcDefDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcDefDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcDefDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void FilingCompletedEventHandler(object sender, FilingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FilingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FilingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstStockCreateCompletedEventHandler(object sender, ProcInstStockCreateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstStockCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstStockCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcDefImportWithoutDelSotckCompletedEventHandler(object sender, ProcDefImportWithoutDelSotckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcDefImportWithoutDelSotckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcDefImportWithoutDelSotckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcDefImportCompletedEventHandler(object sender, ProcDefImportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcDefImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcDefImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcDefExportCompletedEventHandler(object sender, ProcDefExportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcDefExportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcDefExportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcDefExistCompletedEventHandler(object sender, ProcDefExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcDefExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcDefExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserInfoStringCompletedEventHandler(object sender, GetUserInfoStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WorklistCompletedEventHandler(object sender, WorklistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WorklistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WorklistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WorklistOrderByColumnsCompletedEventHandler(object sender, WorklistOrderByColumnsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WorklistOrderByColumnsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WorklistOrderByColumnsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WorklistByDateCompletedEventHandler(object sender, WorklistByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WorklistByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WorklistByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WorklistByDateOrderByColumnsCompletedEventHandler(object sender, WorklistByDateOrderByColumnsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WorklistByDateOrderByColumnsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WorklistByDateOrderByColumnsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcDefListCompletedEventHandler(object sender, ProcDefListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcDefListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcDefListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstListCompletedEventHandler(object sender, ProcInstListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcVarListCompletedEventHandler(object sender, ProcVarListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcVarListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcVarListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcVarInstListCompletedEventHandler(object sender, ProcVarInstListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcVarInstListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcVarInstListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SubProcVarListCompletedEventHandler(object sender, SubProcVarListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubProcVarListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubProcVarListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InstructListCompletedEventHandler(object sender, InstructListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstructListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstructListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DelOverdueStockCompletedEventHandler(object sender, DelOverdueStockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelOverdueStockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelOverdueStockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ProcInstDeleteCompletedEventHandler(object sender, ProcInstDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcInstDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcInstDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UserIDListCompletedEventHandler(object sender, UserIDListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void OUIDListCompletedEventHandler(object sender, OUIDListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OUIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OUIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RoleIDListCompletedEventHandler(object sender, RoleIDListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RoleIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RoleIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GroupIDListCompletedEventHandler(object sender, GroupIDListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GroupIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void OuUserIDListCompletedEventHandler(object sender, OuUserIDListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OuUserIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OuUserIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RecursiveUserIDListCompletedEventHandler(object sender, RecursiveUserIDListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecursiveUserIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecursiveUserIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserSchemaCompletedEventHandler(object sender, GetUserSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void OuRoleIDListCompletedEventHandler(object sender, OuRoleIDListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OuRoleIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OuRoleIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GroupUserIDListCompletedEventHandler(object sender, GroupUserIDListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupUserIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GroupUserIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UserIDLikeListCompletedEventHandler(object sender, UserIDLikeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserIDLikeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserIDLikeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void NewestProcDefListCompletedEventHandler(object sender, NewestProcDefListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewestProcDefListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewestProcDefListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ManWKItemTrackCompletedEventHandler(object sender, ManWKItemTrackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManWKItemTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ManWKItemTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WKItemTrackCompletedEventHandler(object sender, WKItemTrackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WKItemTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WKItemTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WKItemTrackByWKItemIDCompletedEventHandler(object sender, WKItemTrackByWKItemIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WKItemTrackByWKItemIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WKItemTrackByWKItemIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WKItemTrackByWKItemKindCompletedEventHandler(object sender, WKItemTrackByWKItemKindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WKItemTrackByWKItemKindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WKItemTrackByWKItemKindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RetrievalbeWKItemListCompletedEventHandler(object sender, RetrievalbeWKItemListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievalbeWKItemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrievalbeWKItemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591